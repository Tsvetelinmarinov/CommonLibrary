<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonLibrary</name>
    </assembly>
    <members>
        <member name="T:CommonLibrary.AbstractDataTypes.Module`1">
            <summary>
             Defines a module for a modular array.
            </summary>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Module`1.Value">
            <summary>
             Gets the value of the module.
            </summary>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Module`1.Previous">
            <summary>
             Gets the previous module in the modular array.
            </summary>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Module`1.Next">
            <summary>
             Gets the next module in the modular array.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Module`1.#ctor(`0)">
            <summary>
             Creates a new module with the specified value.
            </summary>
            
            <param name="value">
             The value of the module.
            </param>
        </member>
        <member name="T:CommonLibrary.AbstractDataTypes.Number">
            <summary>
             Defines a data type for numbers. The number is implemented with BigInteger so
             can store very large values. All arithmetic operations are supported. The Number instance
             wraps a BigInteger and make it reference type.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.#ctor(System.Numerics.BigInteger)">
            <summary>
             Creates a new instance of the Number class with specified value.
             That constructor is private beacause the implicit conversion operators exists.
             Only those operators should be used to create new instances
             and only those operators uses that constructor.
            </summary>
            
            <param name="value">
             The value of the number.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Finalize">
            <summary>
             Releases the resources used by the Number instance.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Sum(CommonLibrary.AbstractDataTypes.Number)">
            <summary>
             Sums another number to this number.
            </summary>
            
            <param name="number">
             The other number to sum.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Sum(System.Int32)">
            <summary>
             Sums another number to this number.
            </summary>
            
            <param name="number">
             The other number to sum.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Subtract(CommonLibrary.AbstractDataTypes.Number)">
            <summary>
             Subtracts another number from this number.
            </summary>
            
            <param name="number">
             The other number to subtract.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Subtract(System.Int32)">
            <summary>
             Subtracts another number from this number.
            </summary>
            
            <param name="number">
             The other number to subtract.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Multiply(CommonLibrary.AbstractDataTypes.Number)">
            <summary>
             Multiplies this number by another number.
            </summary>
            
            <param name="number">
             The other number to multiply by.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Multiply(System.Int32)">
            <summary>
             Multiplies this number by another number.
            </summary>
            
            <param name="number">
             The other number to multiply by.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Divide(CommonLibrary.AbstractDataTypes.Number)">
            <summary>
             Divides this number by another number.
            </summary>
            
            <param name="number">
              The other number to divide by.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Divide(System.Int32)">
            <summary>
             Divides this number by another number.
            </summary>
            
            <param name="number">
              The other number to divide by.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Reminder(CommonLibrary.AbstractDataTypes.Number)">
            <summary>
             Gets the reminder of this number divided by another number.
            </summary>
            
            <param name="number">
             The other number to get the reminder by.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Reminder(System.Int32)">
            <summary>
             Gets the reminder of this number divided by another number.
            </summary>
            
            <param name="number">
             The other number to get the reminder by.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.DivisionReminder(CommonLibrary.AbstractDataTypes.Number)">
            <summary>
             Gets the division and reminder of this number divided by another number.
            </summary>
            
            <param name="number">
             The other number to divide by.
            </param>
            
            <returns>
             Tuple where the first item is the division result and the second item is the reminder.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.DivisionReminder(System.Int32)">
            <summary>
             Gets the division and reminder of this number divided by another number.
            </summary>
            
            <param name="number">
             The other number to divide by.
            </param>
            
            <returns>
             Tuple where the first item is the division result and the second item is the reminder.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Dispose">
            <summary>
             Indicates to the Garbage Collector not to call the destructor(the finalizer).
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.ToString">
            <summary>
             Returns the string representation of the number.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.CompareTo(CommonLibrary.AbstractDataTypes.Number)">
            <summary>
             Compares this number to another number.
            </summary>
            
            <param name="other">
             The other number to compare to.
            </param>
            
            <returns>
             1 if this number is greater than the other number,
             0 if they are equal, and -1 if this number is less than the other number.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Equals(CommonLibrary.AbstractDataTypes.Number)">
            <summary>
             Checks if this number is equal to another number.
            </summary>
            
            <param name="other">
             The other number to compare to.
            </param>
            
            <returns>
             True if the numbers are equal, false otherwise.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.Equals(System.Object)">
            <summary>
             Checks if this number is equal to another number.
            </summary>
            
            <param name="obj">
             The other number to compare to.
            </param>
            
            <returns>
             True if the numbers are equal, false otherwise.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Number.GetHashCode">
            <summary>
             Generates the hash code for the number.
            </summary>
        </member>
        <member name="T:CommonLibrary.AbstractDataTypes.Pair`2">
            <summary>
            
            EN: 
               A key-value pair.
              
            BG:
              Двойка ключ-стойност.
            
            </summary>
            
            <typeparam name="KeyType">
             EN: The data type of the key.
             BG: Типа данни на ключа.
            </typeparam>
            
            <typeparam name="ValueType">
             EN: The data type of the value.
             BG: Типа данни на стойността.
            </typeparam>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Pair`2.Key">
            <summary>
            
            EN:
              Gets the key of the key-value pair.
              
            BG:
              Достъпва ключа на двойката ключ-стойност.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Pair`2.Value">
            <summary>
            
            EN:
              Gets the value of the key-value pair.
              
            BG:
              Достъпва стойността на двойката ключ-стойност.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Pair`2.KeyAndValue">
            <summary>
            
            EN:
              Returns the key and the value as tuple.
            
            BG:
              Връща ключа и стойността на двойката ключ-стойност като двойка (Tuple).
              
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Pair`2.#ctor(`0,`1)">
            <summary>
            
            EN:
              Creates new key-value pair with the specified key and value.
              
            BG:
              Създава нова двойка ключ-стойност с указаните ключ и стойност.
            
            </summary>
            
            <param name="key">
             EN: The key.
             BG: Ключа.
            </param>
            
            <param name="value">
             EN: The value.
             BG: Стойността.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Pair`2.ReturnAsString">
            <summary>
            
            EN:
              Returns the key and the value of the pair concatenated with
              separator as string.
              
            BG:
              Връща ключа и стойността на двойката ключ-стойност конкатенирани
              с разделител като текст (string).
            
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Pair`2.ToString">
            <summary>
             Converts the key value pair to a string.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Pair`2.Clone">
            <summary>
            
             EN:
                Clones the pair. Returns it like an object;
                
             BG:
               Клонира двойката ключ-стойност, като я връща като обект,
               който да бъде конвертиран (кастнат).
            
            </summary>
            
            <returns>
             EN: The pair as object.
             BG: Дойката ключ-стойност като обект.
            </returns>
        </member>
        <member name="T:CommonLibrary.AbstractDataTypes.Text">
            <summary>
             The Text represent a data type for text with the same characteristics
             as a String but with the difference that the Text is mutable and uses 
             a list for buffer. The Text provides faster operation because there is no
             creation of a new text every time when concatenating, removing, replacing etc.
            </summary>
        </member>
        <member name="F:CommonLibrary.AbstractDataTypes.Text.EmptyText">
            <summary>
             Defines empty text.
            </summary>
        </member>
        <member name="F:CommonLibrary.AbstractDataTypes.Text.WhiteSpace">
            <summary>
             Defines a white space.
            </summary>
        </member>
        <member name="F:CommonLibrary.AbstractDataTypes.Text.NewLine">
            <summary>
             Defines a new line character.
            </summary>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Text.Item(System.Int32)">
            <summary>
             Gets or sets the symbol at the specified index in the text.
            </summary>
            
            <param name="index">
             The index of the symbol in the text.
            </param>
            
            <returns>
             The symbol at the specified index in the text.
            </returns>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Text.Length">
            <summary>
             Gets the count of the symbols of the text.
            </summary>
        </member>
        <member name="P:CommonLibrary.AbstractDataTypes.Text.Symbols">
            <summary>
             Gets the array with the symbols of the text.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
             Creates new text with the symbols from the specified array.
             The constructor is public but it is preferred to use the operator
             '=' to accept value. 
            </summary>
            
            <param name="array">
             The array with the symbols for the text.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Finalize">
            <summary>
             The finalizer is used to release all the resources
             of the text.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Concatenate(System.String)">
            <summary>
             Concatenates the specified text with the current text.
            </summary>
            
            <param name="text">
             The text to be appendet to the current text.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Concatenate(CommonLibrary.AbstractDataTypes.Text)">
            <summary>
             Concatenates the specified text with the current text.
            </summary>
            
            <param name="text">
             The text to be appendet to the current text.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Concatenate(System.Char)">
            <summary>
             Concatenates the specified symbol with the current text.
            </summary>
            
            <param name="symbol">
             The symbol to be appendet to the current text.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Remove(System.String)">
            <summary>
             Removes the specified text from the current text, if the
             specified text exists in the current text.
            </summary>
            
            <param name="text">
             The text to be removed.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Remove(CommonLibrary.AbstractDataTypes.Text)">
            <summary>
             Removes the specified text from the current text, if the
             specified text exists in the current text.
            </summary>
            
            <param name="text">
             The text to be removed.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Remove(System.Int32,System.Int32)">
            <summary>
             Removes the symbols in the specified range 
             from the text.
            </summary>
            
            <param name="start">
             The starting index.
            </param>
            
            <param name="end">
             The ending index.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Remove(System.Int32)">
            <summary>
             Removes a symbol from the text at the specified index.
            </summary>
            
            <param name="index">
             The index of the symbol to be removed.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.ContainsText(System.String)">
            <summary>
             Checks if the specified text exists in the current text.
            </summary>
            
            <param name="text">
             The text to be checked.
            </param>
            
            <returns>
             True if the current text contains the specified text,
             otherwise False.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.ContainsText(System.Char)">
            <summary>
             Checks if the specified symbol exists in the current text.
            </summary>
            
            <param name="symbol">
             The symbol to be checked.
            </param>
            
            <returns>
             True if the current text contains the specified symbol,
             otherwise False.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Clear">
            <summary>
             Clears the text.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Insert(System.Int32,System.String)">
            <summary>
             Inserts the specified text at the specified intex in the 
             current text.
            </summary>
            
            <param name="index">
             The index in the current text.
            </param>
            
            <param name="text">
             The text to be inserted at that index.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Insert(System.Int32,CommonLibrary.AbstractDataTypes.Text)">
            <summary>
             Inserts the specified text at the specified intex in the 
             current text.
            </summary>
            
            <param name="index">
             The index in the current text.
            </param>
            
            <param name="text">
             The text to be inserted at that index.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Insert(System.Int32,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
             Inserts the specified collection of symbols at the specified intex in the 
             current text.
            </summary>
            
            <param name="index">
             The index in the current text.
            </param>
            
            <param name="array">
             The array of symbols to be inserted at that index.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.JoinBy(System.String)">
            <summary>
             Concatenates the symbols from the text with the specified
             separator between each of them.
            </summary>
            
            <param name="separator">
             The separator.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.JoinBy(CommonLibrary.AbstractDataTypes.Text)">
            <summary>
             Concatenates the symbols from the text with the specified
             separator between each of them.
            </summary>
            
            <param name="separator">
             The separator.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.JoinBy(System.Char)">
            <summary>
             Concatenates the symbols from the text with the specified
             separator between each of them.
            </summary>
            
            <param name="separator">
             The separator.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.SplitBy(System.Char,CommonLibrary.Enums.SplitType)">
            <summary>
             Splits the text by the given separator and uses the 
             specified splitting type. To specify the split type you
             should use a flag from the SplitType enumeration as follows:
             - Use flag ClearOutput to specify that the the empty strings
             created sometimes when splitting should be removed from the
             output.
             - Use flag KeepAllEntries to specify that the empty string should be
             left in the output.  
            </summary>
            
            <param name="separator">
             The separator.
            </param>
            
            <param name="splitType">
             The type of splitting.
            </param>
            
            <returns>
             An array with the splatted text.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.SplitBy(System.String,CommonLibrary.Enums.SplitType)">
            <summary>
             Splits the text by the given separator and uses the 
             specified splitting type. To specify the split type you
             should use a flag from the SplitType enumeration as follows:
             - Use flag ClearOutput to specify that the the empty strings
             created sometimes when splitting should be removed from the
             output.
             - Use flag KeepAllEntries to specify that the empty string should be
             left in the output.  
            </summary>
            
            <param name="separator">
             The separator.
            </param>
            
            <param name="splitType">
             The type of splitting.
            </param>
            
            <returns>
             An array with the splatted text.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.SplitBy(CommonLibrary.AbstractDataTypes.Text,CommonLibrary.Enums.SplitType)">
            <summary>
             Splits the text by the given separator and uses the 
             specified splitting type. To specify the split type you
             should use a flag from the SplitType enumeration as follows:
             - Use flag ClearOutput to specify that the the empty strings
             created sometimes when splitting should be removed from the
             output.
             - Use flag KeepAllEntries to specify that the empty string should be
             left in the output.  
            </summary>
            
            <param name="separator">
             The separator.
            </param>
            
            <param name="splitType">
             The type of splitting.
            </param>
            
            <returns>
             An array with the splatted text.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.SplitBy(System.Collections.Generic.IEnumerable{System.String},CommonLibrary.Enums.SplitType)">
            <summary>
             Splits the text by the given separators.
             To specify the split type you should use a 
             flag from the SplitType enumeration as follows:
             - Use flag ClearOutput to specify that the the empty strings
             created sometimes when splitting should be removed from the
             output.
             - Use flag KeepAllEntries to specify that the empty string should be
             left in the output.  
            </summary>
            
            <param name="separators">
             The separators for split.
            </param>
            
            <param name="splitType">
             The type of the splitting.
            </param>
            
            <returns>
             An array with the splatted text.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Cut(System.Int32,System.Int32)">
            <summary>
             Cuts a piece from the text.
            </summary>
            
            <param name="start">
             The starting index.
            </param>
            
            <param name="end">
             The ending index.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Replace(System.Int32,System.Int32,CommonLibrary.AbstractDataTypes.Text)">
            <summary>
             Replaces the symbol in the specified range in the text with the symbols
             from the specified replacement text.
            </summary>
            
            <param name="startIndex">
             The start index.
            </param>
            
            <param name="end">
             The ending index.
            </param>
            
            <param name="replacement">
             The replacement text.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Replace(System.Int32,System.Int32,System.String)">
            <summary>
             Replaces the symbol in the specified range in the text with the symbols
             from the specified replacement text.
            </summary>
            
            <param name="startIndex">
             The start index.
            </param>
            
            <param name="end">
             The ending index.
            </param>
            
            <param name="replacement">
             The replacement text.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Trim(CommonLibrary.Enums.TrimOrigin)">
            <summary>
             Trims the white spaces from the beginning or the end of the text.
             The position for the trim operation should be specified with a flag from 
             the TrimOrigin enumeration.
              Use flag Beginning to specify to trim the beginning of the text.
              Use flag End to specify to trim the end of the text.
             Note that if there are more that one white spaces they all will be removed.
            </summary>
            
            <param name="origin">
             The position for trim.
            </param>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.IndexOf(CommonLibrary.AbstractDataTypes.Text)">
            <summary>
             Finds the index of the first occurence of the first symbol
             of the specified text in the current text.
            </summary>
            
            <param name="text">
             The text which index need to be found.
            </param>
            
            <returns>
             The index of the first occurence of the first symbol 
             of the specified text or -1 if there is no mathces.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.IndexOf(System.String)">
            <summary>
             Finds the index of the first occurence of the first symbol
             of the specified text in the current text.
            </summary>
            
            <param name="text">
             The text which index need to be found.
            </param>
            
            <returns>
             The index of the first occurence of the first symbol 
             of the specified text or -1 if there is no mathces.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.IndexOf(System.Char)">
            <summary>
             Finds the index of the first occurence of the symbol
             in the current text.
            </summary>
            
            <param name="symbol">
             The symbol which index need to be found.
            </param>
            
            <returns>
             The index of the first occurence of the symbol 
             in the text or -1 if there is no mathces.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.LastIndexOf(CommonLibrary.AbstractDataTypes.Text)">
            <summary>
             Finds the index of the last occurense of the first symbol
             of the specified text.
            </summary>
            
            <param name="text">
             The text which index should be found.
            </param>
            
            <returns>
             The index of the last occurence of the first symbol of the
             specified text or -1 if there are no matches.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.LastIndexOf(System.String)">
            <summary>
             Finds the index of the last occurense of the first symbol
             of the specified text.
            </summary>
            
            <param name="text">
             The text which index should be found.
            </param>
            
            <returns>
             The index of the last occurence of the first symbol of the
             specified text or -1 if there are no matches.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.LastIndexOf(System.Char)">
            <summary>
             Finds the index of the last occurense of the symbol
             in the text.
            </summary>
            
            <param name="symbol">
             The symbol which index should be found.
            </param>
            
            <returns>
             The index of the last occurence of the symbol or -1 if there are no matches.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.ToString">
            <summary>
             Overrides ToString() method to use the text content when using the variable.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.ToBuilder">
            <summary>
             Returns the text as a StingBuilder.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.ToCharList">
            <summary>
             Returns the text as a list of characters.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.ToDataStream">
            <summary>
             Converts the text to data stream. The data stream defines
             an array of bytes of the text.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.ToUpperCase">
            <summary>
             Converts the symbols of the text to upper case symbols.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLibrary.AbstractDataTypes.Text.ToLowerCase" -->
        <member name="M:CommonLibrary.AbstractDataTypes.Text.CompareTo(CommonLibrary.AbstractDataTypes.Text)">
            <summary>
             Compare two texts.
            </summary>
            
            <param name="other">
             The other text to compare to.
            </param>
            
            <returns>
             Less than zero - this text precedes the other in the sort order.
             Zero - both texts has same order and symbols.
             Greater than zero - this text follows the other in the sort order.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Equals(System.Object)">
            <summary>
             Compare the text with another text.
            </summary>
            
            <param name="obj">
             The other text to compare to.
            </param>
            
            <returns>
             True if bot text are equal, otherwise False.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.GetHashCode">
            <summary>
             GetHashCode method helps the text acting normal in collections like Dictionary
             and HashSet.
            </summary>
            
            <returns>
             The hash code of the text.
            </returns>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Clone">
            <summary>
             Returns the text as object, so can be cloned or casted.
            </summary>
        </member>
        <member name="M:CommonLibrary.AbstractDataTypes.Text.Dispose">
            <summary>
             Indicates to the Garbage Collector not to call the destructor of
             the text(there are no resources to be disposed) to save time and to
             improve the performance.
            </summary>
        </member>
        <member name="T:CommonLibrary.Attributes.UsageAttribute">
            <summary>
             
             EN: 
               Specifies the usage of that member/data type.
               
             BG:
               Указва за какво се използва този член или тип данни.
             
            </summary>
        </member>
        <member name="M:CommonLibrary.Attributes.UsageAttribute.#ctor(System.String)">
            <summary>
            
            EN:
              Creates new UsageAttribute with the specified definition.
              
            BG:
              Създава нов UsageAttribute с указаната дефиниция.
            
            </summary>
            
            <param name="definition">
             EN: The definition.
             BG: Дефиницията.
            
            </param>
        </member>
        <member name="T:CommonLibrary.Base.Abstract.ModularArrayBase`1">
            <summary>
             Defines a base class for a modular array. The modular array is similar to 
             the LinkedList. It works with a modules linked together. Each module has a 
             value and a references to the next and the previus module.
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Abstract.ModularArrayBase`1.Add(`0,CommonLibrary.Enums.ModulePosition)">
            <summary>
             Adds a new module to the modular array at the specified position.
            </summary>
            <param name="value">
             The value to be added.
            </param>
            
            <param name="position">
             The position where the new module should be added.
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Abstract.ModularArrayBase`1.Remove(CommonLibrary.Enums.ModulePosition)">
            <summary>
             Removes a module from the modular array at the specified position.
            </summary>
            
            <param name="position">
             The position where the module should be removed.
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Abstract.ModularArrayBase`1.Clear">
            <summary>
             Clears all modules from the modular array.
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Abstract.ModularArrayBase`1.ExecuteOnEach(System.Action{`0})">
            <summary>
             Executes a command on each module in the modular array.
            </summary>
            
            <param name="command">
              The command to execute on each module.
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Abstract.ModularArrayBase`1.AsArray">
            <summary>
             Returns an array that contains all module values in the modular array.
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Abstract.ModularArrayBase`1.AsCollection">
            <summary>
             Returns the values of the array in a collection.
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Abstract.ModularArrayBase`1.ContainsValue(`0)">
            <summary>
             Checks if some of the modules in the modular array contains the value.
            </summary>
            
            <param name="value">
             The value to be searched
            </param>
            
            <returns>
             True if some of the modules contains the value, otherwise false.
            </returns>
        </member>
        <member name="T:CommonLibrary.Base.Interfaces.ICommonPair">
            <summary>
            
            EN:
              Base interface for a common key-value pair.
              
            БГ:
              Базов интерфейс за обща двойка ключ-стойност.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.ICommonPair.Key">
            <summary>
            
            EN:
              Gets the key of the key-value pair.
              
            BG:
              Достъпва ключа на двойката ключ-стойност.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.ICommonPair.Value">
            <summary>
            
            EN:
              Gets the value of the key-value pair.
              
            BG:
              Достъпва стойността на двойката ключ-стойност.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.ICommonPair.KeyAndValue">
            <summary>
            
            EN:
              Returns the key and the value as tuple.
            
            BG:
              Връща ключа и стойността на двойката като двойка (Tuple).
              
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.ICommonPair.ReturnAsString">
            <summary>
            
            EN:
              Returns the key and the value of the pair concatenated with
              separator as string.
              
            BG:
              Връща ключа и стойността на двойката ключ-стойност конкатенирани
              с разделител като текст (string).
            
            </summary>
        </member>
        <member name="T:CommonLibrary.Base.Interfaces.IDataSet`1">
            <summary>
             Base interface for a set.
             Describes a set of values. The set is data structure that 
             keeps unique elements. The Hash Function generates unique value for every element.
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IDataSet`1.Count">
            <summary>
             Get the length of the set. That is the
             count of the elements in the set.
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IDataSet`1.Add(`0)">
            <summary>
             Adds the element to the set.
             The order of the elements can not be guarantied.
            </summary>
            
            <param name="element">
             The element to be added.
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IDataSet`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Adds the collection to the set.
            </summary>
            
            <param name="collection">
             The collection wich elements will be added.
            </param>
            
            <exception cref="T:CommonLibrary.Exceptions.Error">
             The extern collection is empty.
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IDataSet`1.Remove(`0)">
            <summary>
             Removes the element from the set, if the same exist.
            </summary>
            
            <param name="element">
             The elemenet to be removed.
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IDataSet`1.Truncate">
            <summary>
             Clears the set.
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IDataSet`1.ContainsElement(`0)">
            <summary>
             Check for the element in the set.
            </summary>
            
            <param name="element">
             The element to be searched.
            </param>
            
            <returns>
             True if the element exist in the set, otherwise - False.
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IDataSet`1.ReturnAsArray">
            <summary>
             Returns the current set as array.
            </summary>
            
            <returns>
             An array with the values copied from the set.
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IDataSet`1.ReturnAsCollection">
            <summary>
             Returns the current set as collection of 
             data type CommonLibrary.Collections.Collection.
            </summary>
            
            <returns>
             Collection with the values copied from the set.
            </returns>
        </member>
        <member name="T:CommonLibrary.Base.Interfaces.IGenericCollection`1">
            <summary>
            
            EN: Base interface for generic collections of elements.  
            
            BG: Базов интерфейс за общи колекции от елементи.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IGenericCollection`1.Item(System.Int32)">
            <summary>
            
            EN: Indexer  
            
            BG: Индексатор
            
            </summary>
            
            <param name="index">
            EN: The index of the element in the collection  
            BG: Индексът на елемента в колекцията
            </param>
            
            <returns>
            EN: The element at that index in the collection  
            BG: Елементът на този индекс в колекцията
            </returns>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IGenericCollection`1.Count">
            <summary>
            
            EN: The count of the elements in the collection  
            
            BG: Броят на елементите в колекцията
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IGenericCollection`1.Capacity">
            <summary>
            
            EN: The capacity of the collection  
            
            BG: Капацитетът на колекцията
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IGenericCollection`1.FirstElement">
            <summary>
            
            EN: Get or set the first element in the collection  
            
            BG: Взема или задава първия елемент в колекцията
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IGenericCollection`1.LastElement">
            <summary>
            
            EN: Get or set the last element in the collection  
            
            BG: Взема или задава последния елемент в колекцията
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.Add(`0)">
            <summary>
            
            EN: Adds an element to the collection  
            
            BG: Добавя елемент към колекцията
            
            </summary>
            
            <param name="element">
            EN: The element  
            BG: Елементът
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.AddMultipleElements(`0[])">
            <summary>
            
            EN: Adds multiple elements to the collection  
            
            BG: Добавя множество елементи към колекцията
            
            </summary>
            
            <param name="elements">
            EN: The sequence of elements  
            BG: Последователността от елементи
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.AddCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            EN: Adds another collection to the current collection  
            
            BG: Добавя друга колекция към текущата колекция
            
            </summary>
            
            <param name="collection">
            EN: The external collection  
            BG: Външната колекция
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.RemoveElement(`0)">
            <summary>
            
            EN: Removes an element from the collection and returns true if successful  
            
            BG: Премахва елемент от колекцията и връща true при успех
            
            </summary>
            
            <param name="element">
            EN: The element  
            BG: Елементът
            </param>
            
            <returns>
            EN: True if successfully removed, otherwise false  
            BG: True при успешно премахване, иначе false
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.RemoveElementAt(System.Int32)">
            <summary>
            
            EN: Removes an element from the collection by its index  
            
            BG: Премахва елемент от колекцията по индекс
            
            </summary>
            
            <param name="index">
            EN: The index of the element  
            BG: Индексът на елемента
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.RemoveInDiapason(System.Int32,System.Int32)">
            <summary>
            
            EN: Removes elements from the collection in a given range  
            
            BG: Премахва елементи от колекцията в зададен диапазон
            
            </summary>
            
            <param name="startIndex">
            EN: Starting index  
            BG: Начален индекс
            </param>
            
            <param name="endIndex">
            EN: Ending index  
            BG: Краен индекс
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.InsertElementAt(System.Int32,`0)">
            <summary>
            
            EN: Inserts an element at a given index  
            
            BG: Вмъква елемент на зададен индекс
            
            </summary>
            
            <param name="index">
            EN: The index  
            BG: Индексът
            </param>
            
            <param name="element">
            EN: The element to insert  
            BG: Елементът за вмъкване
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.InsertMultipleElementsAt(System.Int32,`0[])">
            <summary>
            
            EN: Inserts multiple elements at a given index  
            
            BG: Вмъква множество елементи на зададен индекс
            
            </summary>
            <param name="index">
            EN: The index  
            BG: Индексът
            </param>
            
            <param name="elements">
            EN: The elements  
            BG: Елементите
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.InsertCollectionAt(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            EN: Inserts another collection at a given index  
            
            BG: Вмъква друга колекция на зададен индекс
            
            </summary>
            <param name="index">
            EN: The index  
            BG: Индексът
            </param>
            
            <param name="collection">
            EN: The collection to insert  
            BG: Колекцията за вмъкване
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.ContainsElement(`0)">
            <summary>
            
            EN: Checks if the collection contains the given element  
            
            BG: Проверява дали колекцията съдържа дадения елемент
            
            </summary>
            <param name="element">
            EN: The element  
            BG: Елементът
            </param>
            
            <returns>
            EN: True if the element is found  
            BG: True ако елементът е намерен
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.FindIndexOf(`0)">
            <summary>
            
            EN: Finds the index of the given element  
            
            BG: Намира индекса на дадения елемент
            
            </summary>
            <param name="element">
            EN: The element  
            BG: Елементът
            </param>
            
            <returns>
            EN: The index of the element  
            BG: Индексът на елемента
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.FindLastIndexOf(`0)">
            <summary>
            
            EN: Finds the last index of the given element  
            
            BG: Намира последния индекс на дадения елемент
            
            </summary>
            <param name="element">
            EN: The element  
            BG: Елементът
            </param>
            
            <returns>
            EN: The last index of the element  
            BG: Последният индекс на елемента
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.FindElementByCondition(System.Predicate{`0})">
            <summary>
            
            EN: Finds the first element that matches the condition  
            
            BG: Намира първия елемент, който отговаря на условието
            
            </summary>
            <param name="condition">
            EN: The predicate condition  
            BG: Условието като предикат
            </param>
            
            <returns>
            EN: The matching element or default value  
            BG: Съвпадащият елемент или стойност по подразбиране
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.FindElementsByCondition(System.Predicate{`0})">
            <summary>
            
            EN: Finds all elements that match the condition  
            
            BG: Намира всички елементи, които отговарят на условието
            
            </summary>
            <param name="condition">
            EN: The predicate condition  
            BG: Условието като предикат
            </param>
            
            <returns>
            EN: Array of matching elements or default values  
            BG: Масив от съвпадащи елементи или стойности по подразбиране
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.SortCollection">
            <summary>
            
            EN: Sorts the collection in ascending order  
            
            BG: Сортира колекцията във възходящ ред
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.ReverseCollection">
            <summary>
            
            EN: Reverses the collection  
            
            BG: Обръща колекцията
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.IsTrueForAll(System.Predicate{`0})">
            <summary>
            
            EN: Checks if all elements match the condition  
            
            BG: Проверява дали всички елементи отговарят на условието
            
            </summary>
            
            <returns>
            EN: True if all match, otherwise false  
            BG: True ако всички съвпадат, иначе false
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.ExecuteOnEach(System.Action{`0})">
            <summary>
            
            EN: Executes an action on each element in the collection  
            
            BG: Изпълнява действие върху всеки елемент в колекцията
            
            </summary>
            
            <param name="command">
            EN: The action to execute  
            BG: Действието за изпълнение
            </param>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IGenericCollection`1.TruncateCollection">
            <summary>
            
            EN: Truncates the collection and resets capacity to default  
            
            BG: Изчиства колекцията и връща капацитета към стойността по подразбиране
            
            </summary>
        </member>
        <member name="T:CommonLibrary.Base.Interfaces.IPair`2">
            <summary>
            
            EN: 
              Defines base interface for a key-value pair.
              
            BG:
              Базов интерфейс за двойка ключ-стойност.
            
            </summary>
            
            <typeparam name="KeyType">
             EN: The data type of the key.
             BG: Типа данни на ключа.
            </typeparam>
            
            <typeparam name="ValueType">
             EN: The data type of the value.
             BG: Типа данни на стойността.
            </typeparam>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IPair`2.Key">
            <summary>
            
            EN:
              Gets the key of the key-value pair.
              
            BG:
              Достъпва ключа на двойката ключ-стойност.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IPair`2.Value">
            <summary>
            
            EN:
              Gets the value of the key-value pair.
              
            BG:
              Достъпва стойността на двойката ключ-стойност.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IPair`2.KeyAndValue">
            <summary>
            
            EN:
              Returns the key and the value as tuple.
            
            BG:
              Връща ключа и стойността на двойката като двойка (Tuple).
              
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPair`2.ReturnAsString">
            <summary>
            
            EN:
              Returns the key and the value of the pair concatenated with
              separator as string.
              
            BG:
              Връща ключа и стойността на двойката ключ-стойност конкатенирани
              с разделител като текст (string).
            
            </summary>
        </member>
        <member name="T:CommonLibrary.Base.Interfaces.IPairList`2">
            <summary>
            
            EN:
              Base interface for associative collection of objects of type 
              CommonLibrary.AbstractDataTypes.Pair. Each pair has key and associated value.
            
            BG:
              Базов интерфейс за асициативен масив от обекти от тип данни
              CommonLibrary.AbstractDataTypes.Pair. Всяка двойка има ключ
              и асоцийрана с него стойност. Както при всеки асоциативен масив, така и този
              достъпва дадена стойност по неиния ключ.
            
            </summary>
            
            <typeparam name="KeyType">
             EN: The data type of the key.
             BG: Типът данни на ключа.
            </typeparam>
            
            <typeparam name="ValueType">
             EN: The data type of the value.
             BG: Типът данни на стойността.
            </typeparam>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IPairList`2.Item(`0)">
            <summary>
            
            EN:
              Indexer.
              
            BG:
              Индексатор.
            
            </summary>
            
            <param name="key">
             EN: The key of the pair.
             BG: Ключа на двойката ключ-стойност.
            </param>
            
            <returns>
             EN: The value associated with that key.
             BG: Стойността асоцийрана с този ключ.
            </returns>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IPairList`2.Keys">
            <summary>
            
            EN:
              Gets the keys from the collection in a collection of keys.
              
            BG:
              Извлича ключовете от двойките ключ-стойност в колекция от ключове.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IPairList`2.Values">
            <summary>
            
            EN:
              Gets the values from the collection in a collection of values.
              
            BG:
              Извлича стойностите от двойките ключ-стойност в колекция от стойности.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IPairList`2.Capacity">
            <summary>
            
            EN:
              Get or set the capacity of the collection.
            
            BG:
              Достъпва капацитета на асоциативната колекция.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Base.Interfaces.IPairList`2.Count">
            <summary>
            
            EN:
              Gets the count of the pairs in the collection.
              
            BG:
              Достъпва бройката на двойките ключ-стойност в колецията.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.Add(CommonLibrary.AbstractDataTypes.Pair{`0,`1})">
            <summary>
            Добавя единичен елемент (ключ–стойност) към колекцията.  
            Adds a single (key–value) pair to the collection.
            </summary>
            <param name="pair">
            Елементът за добавяне.  
            The pair to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Аргументът <paramref name="pair"/> е null.  
            The <paramref name="pair"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            В колекцията вече съществува елемент със същия ключ.  
            An element with the same key already exists in the collection.
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.Add(`0,`1)">
            <summary>
            Добавя единичен елемент (ключ–стойност) към колекцията.  
            Adds a single (key–value) pair to the collection.
            </summary>
            <param name="key">
            Ключът на елемента.  
            The key of the element.
            </param>
            <param name="value">
            Стойността, асоциирана с ключа.  
            The value associated with the key.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> е null (ако <typeparamref name="KeyType"/> допуска null).  
            <paramref name="key"/> is null (if <typeparamref name="KeyType"/> allows null).
            </exception>
            <exception cref="T:System.ArgumentException">
            В колекцията вече съществува елемент със същия ключ.  
            An element with the same key already exists in the collection.
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.AddMany(System.Collections.Generic.IEnumerable{CommonLibrary.AbstractDataTypes.Pair{`0,`1}})">
            <summary>
            Добавя множество елементи (ключ–стойност) към колекцията.  
            Adds multiple (key–value) pairs to the collection.
            </summary>
            <param name="collection">
            Последователност от елементи за добавяне.  
            The sequence of pairs to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> е null.  
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Някой от елементите е невалиден или съдържа дублиращ се ключ.  
            One or more items are invalid or contain duplicate keys.
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.Remove(System.Int32)">
            <summary>
            Премахва елемента на указан индекс.  
            Removes the element at the specified index.
            </summary>
            <param name="index">
            Нулево-базиран индекс на елемента за премахване.  
            The zero-based index of the element to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> е извън диапазона [0, Count - 1].  
            <paramref name="index"/> is outside the range [0, Count - 1].
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.Remove(`0)">
            <summary>
            Премахва елемента с посочения ключ, ако съществува.  
            Removes the element with the specified key, if it exists.
            </summary>
            <param name="key">
            Ключът на елемента за премахване.  
            The key of the element to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> е null (ако <typeparamref name="KeyType"/> допуска null).  
            <paramref name="key"/> is null (if <typeparamref name="KeyType"/> allows null).
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Не е намерен елемент с дадения ключ.  
            No element with the specified key was found.
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLibrary.Base.Interfaces.IPairList`2.RemoveInRange(System.Int32,System.Int32)" -->
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.ContainsKey(`0)">
            <summary>
            Проверява дали в колекцията съществува елемент с дадения ключ.  
            Checks whether the collection contains an element with the specified key.
            </summary>
            <param name="key">
            Ключът за търсене.  
            The key to locate.
            </param>
            <returns>
            <see langword="true"/>, ако съществува елемент с този ключ; иначе <see langword="false"/>.  
            <see langword="true"/> if an element with the specified key exists; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> е null (ако <typeparamref name="KeyType"/> допуска null).  
            <paramref name="key"/> is null (if <typeparamref name="KeyType"/> allows null).
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.ContainsValue(`1)">
            <summary>
            Проверява дали в колекцията съществува дадената стойност.  
            Checks whether the collection contains the specified value.
            </summary>
            <param name="value">
            Стойността за търсене.  
            The value to locate.
            </param>
            <returns>
            <see langword="true"/>, ако съществува елемент с тази стойност; иначе <see langword="false"/>.  
            <see langword="true"/> if an element with the specified value exists; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.Insert(System.Int32,CommonLibrary.AbstractDataTypes.Pair{`0,`1})">
            <summary>
            Вмъква елемент на указан индекс, измествaйки следващите елементи надясно.  
            Inserts an element at the specified index, shifting subsequent elements to the right.
            </summary>
            <param name="index">
            Нулево-базиран индекс. Допустим диапазон: [0, Count].  
            The zero-based index. Allowed range: [0, Count].
            </param>
            <param name="pair">
            Елементът за вмъкване.  
            The pair to insert.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> е извън допустимия диапазон.  
            <paramref name="index"/> is outside the allowed range.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pair"/> е null.  
            <paramref name="pair"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Вече съществува елемент със същия ключ.  
            An element with the same key already exists.
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.Insert(System.Int32,`0,`1)">
            <summary>
            Вмъква елемент (ключ–стойност) на указан индекс.  
            Inserts a (key–value) pair at the specified index.
            </summary>
            <param name="index">
            Нулево-базиран индекс. Допустим диапазон: [0, Count].  
            The zero-based index. Allowed range: [0, Count].
            </param>
            <param name="key">
            Ключът на елемента.  
            The key of the element.
            </param>
            <param name="value">
            Стойността, асоциирана с ключа.  
            The value associated with the key.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> е извън допустимия диапазон.  
            <paramref name="index"/> is outside the allowed range.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> е null (ако <typeparamref name="KeyType"/> допуска null).  
            <paramref name="key"/> is null (if <typeparamref name="KeyType"/> allows null).
            </exception>
            <exception cref="T:System.ArgumentException">
            Вече съществува елемент със същия ключ.  
            An element with the same key already exists.
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.Insert(System.Int32,System.Collections.Generic.IEnumerable{CommonLibrary.AbstractDataTypes.Pair{`0,`1}})">
            <summary>
            Вмъква колекция от елементи, започвайки от указан индекс.  
            Inserts a collection of elements starting at the specified index.
            </summary>
            <param name="index">
            Нулево-базиран начален индекс. Допустим диапазон: [0, Count].  
            The zero-based starting index. Allowed range: [0, Count].
            </param>
            <param name="collection">
            Последователност от елементи за вмъкване.  
            The sequence of elements to insert.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> е извън допустимия диапазон.  
            <paramref name="index"/> is outside the allowed range.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> е null.  
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Някой от елементите е невалиден или съдържа дублиращ се ключ.  
            One or more items are invalid or contain duplicate keys.
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.Clear">
            <summary>
            Премахва всички елементи от колекцията.  
            Removes all elements from the collection.
            </summary>
            <remarks>
            След извикване <c>Count</c> трябва да е 0.  
            After calling, <c>Count</c> should be 0.
            </remarks>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.SortCollection(CommonLibrary.Enums.SortingOptions)">
            <summary>
            Сортира колекцията според подадените опции.  
            Sorts the collection according to the given options.
            </summary>
            <param name="options">
            Опции за сортиране (например по ключ/стойност, възходящо/низходящо).  
            Sorting options (e.g., by key/value, ascending/descending).
            </param>
            <exception cref="T:System.ArgumentException">
            Подадени са невалидни или несъвместими опции.  
            Invalid or incompatible sorting options were provided.
            </exception>
        </member>
        <member name="M:CommonLibrary.Base.Interfaces.IPairList`2.ReturnAsArray">
            <summary>
            Връща представяне на колекцията като масив.  
            Returns the collection as an array.
            </summary>
            <remarks>
            Текущата сигнатура на метода е <c>void</c>. Ако трябва да връща масив,  
            прецизирайте сигнатурата например като:  
            The current method signature is <c>void</c>. To return an array,  
            consider changing it to:  
            <code>public abstract Pair&lt;KeyType, ValueType&gt;[] ReturnAsArray();</code>
            </remarks>
        </member>
        <member name="T:CommonLibrary.Collections.Collection`1">
             <summary>
             
              Defines sizable collection of elements, represented at system level like
              list of the same elements with default capacity of 4 elements in the beginning.
              The collection is resized every time the capacity is reached.
              The collection is strongly typed and the data type of the elements should be
              defined with the defining of the collection. This collection can be indexed by index and can
              be iterated with foreach loop. This is the implementation of the IGenericCollection interface.
              
              Kолекция от елементи с динамичен размер, представена като списък от елементи с капацитет по
              подразбиране от 4 елемента.
              Капацитета се увеличава автоматично при запълване на колекцията.
              Колекцията е строго типизирана, тоест типа данни се указва още в началото със създаването на колекцията.
              Може да се индексира по индекс и да се итерира с цикъл foreach.
              
             <typeparam name="DataType">
              The common data type for the elements in this collection
             </typeparam>
            
             </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Collection`1.Item(System.Int32)">
            <summary>
            
            Indexer
            
            Индексатор. Позволява достъп до елемент по неговия индекс в колекцията.
            
            <param name="index">
             The index of the element in the collection
            </param>
            
            <returns>
             The element at that index in the collection
            </returns>
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Collection`1.Count">
             <summary>
             
             Get the count of the elements in the collection.
            
             Броя на елементите в колекцията.
             
             </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Collection`1.Capacity">
            <summary>
            
            Get or set the capacity of the list.
            
            Достъпва капацитета на списъка.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Collection`1.FirstElement">
            <summary>
            
            Get or set the first element in the collection
            
            Достъпва първия елемент в колекцията.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Collection`1.LastElement">
            <summary>
            
            Get or set the last element in the collection.
            
            Достъпва последния елемент в колекцията.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.#ctor">
            <summary>
            
            Create new empty collection of elements with default capacity.
            
            Създава нова празна колекция с капацитет по подразбиране.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.#ctor(System.Boolean)">
            <summary>
            
            Create new empty collection with maximum allowed capacity of 2 000 000 000.
            
            Създава нова празна колекция с максимален капацитет от два милиарда елемента.
            
            <param name="maxCapacity">Indicates when to use the maximum capacity</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.#ctor(System.Int32)">
            <summary>
            
            Create new empty collection with the given capacity.
            
            Създава нова празна колекция със зададения капацитет.
            
            <param name="capacity">The capacity for the collection</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             
             Create new collection with the copied elements from the given
             collection and with capacity same as the count of the elements;
             
             Създава нова колекция с копираните елементи от дадената колекция и капацитет равен на броя им.
            
             <param name="array">The collection which elements will be copied in the new collection</param>
            
             </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            
            Create a collection with the copied elements of the given collection, and capacity set to the 
            given capacity.
            
            Създава колекция с копирани елементи от дадената колекция и с капаците равен на зададения капацитет.
            
            <param name="array">The collection witch elements will be copied in the new collection</param>
            <param name="capacity">The capacity of the new collection</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            
            Create new collection with the copied elements from the given collection
            and maximum capacity.
            
            Създава нова колекция с копирани елементи от дадената колекция и максимален капацитет.
            
            <param name="array">The collection which elements will be copied for the new collection</param>
            <param name="maxCapacity">If true - sets the maximum capacity</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.Add(`0)">
            <summary>
            
            Add an element in the collection.
            
            Добавя елемент в колекцията.
            
            <param name="element">The element to be added.</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.AddMultipleElements(`0[])">
            <summary>
            
            Add multiple elements - no actual count.
            
            Добавя множество елементи в колекцията.
            
            <param name="elements">The elements to be added</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.AddCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            Add collection of elements in the collection
            
            Добавя друга колекция от елементи в колекцията.
            
            <param name="collection">The collection to be added</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.RemoveElement(`0)">
            <summary>
            
            Remove an element from the collection by his value.
            Returns true when successfully removed the element and
            false when not.
            
            Премахва елемент от колекцията по неговата стойност.
            Връща true при успешно премахване, в противен случай false.
            
            <param name="value">The element to be removed</param>
            
            <returns>True if the element is successfully removed, otherwise false</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.RemoveElementAt(System.Int32)">
            <summary>
            
            Remove an element from the collection by his index.
            
            Премахва елемент от колекцията по неговия индекс.
            
            <param name="index">The index of the element in the collection</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.RemoveInDiapason(System.Int32,System.Int32)">
            <summary>
            
            Remove elements form the collection from given index to given index.
            
            Премахва елементите от колекцията в зададения диапазон.
            
            <param name="startIndex">Starting index in the collection</param>
            <param name="endIndex">Ending index in the collection</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.InsertElementAt(System.Int32,`0)">
            <summary>
            
            Insert an element at given index in the collection
            
            Вмъква елемент на зададения индекс в колекцията.
            
            <param name="index">The index in the collection</param>
            <param name="element">The element to be inserted at that index</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.InsertMultipleElementsAt(System.Int32,`0[])">
            <summary>
            
            Insert multiple elements at given index in the collection
            
            Вмъква множество елементи на зададения индекс в колекцията.
            
            <param name="index">The index in the collection</param>
            <param name="elements">The elements</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.InsertCollectionAt(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            Insert another collection at given index in the collection.
            
            Вмъква друга колекция на зададения индекс в колекцията.
            
            <param name="index">The index in the collection</param>
            <param name="collection">The collection to be inserted at that index</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.ContainsElement(`0)">
            <summary>
            
            Check if the given elements is in the collection and returns true if is in, otherwise false.
            
            Проверява дали даден елемент се съдържа в колекцията.
            
            <param name="element">The element</param>
            
            <returns>True if the element is in the collection, otherwise false</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.FindIndexOf(`0)">
            <summary>
            
            Get the index of the given element in the collection.
            
            Намира индекса на даден елемент в колекцията, ако елемента се съдържа в колекцията, ако не връща -1.
            
            <param name="element">The element</param>
            
            <returns>The index of the element. If the elements is not in the collection returns -1</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.FindLastIndexOf(`0)">
            <summary>
            
            Get the index of the last occurrence of the element in the collection,
            if there are more than one element like this.
            
            Връща индекса на последното срещане на елементa в колекцията, ако елемента не се съдържа в колекцията връща -1.
            
            <param name="element">The element in the collection</param>
            
            <returns>The index of the element. If the element in not in the collection returns -1</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.FindElementByCondition(System.Predicate{`0})">
            <summary>
            
            Checks every element in the collection and finds and extracts that one
            who match the Predicate.
            
            Итерира през всеки един елемент в колекцията и връща първия, който отговаря на 
            зададеното условие.
            Ако няма съвпадения, връща стойността по подразбиране за дадения тип данни.
            
            <param name="condition">The Predicate with the condition</param>
            
            <returns>The first element who match the condition. If there is no
            matches returns the default value of the data type.</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.FindElementsByCondition(System.Predicate{`0})">
            <summary>
            
            Checks every element in the collection and extracts all elements
            who match the Predicate.
            
            Итерира през всеки един елемент в колекцията и връща всички, които отговарят на 
            зададеното условие.
            Ако няма съвпадения, връща масив със стойностите по подразбиране за дадения тип данни.
            
            <param name="condition">The Predicate with the condition</param>
            
            <returns>All the elements who match the condition. If there is no
            matches returns array with the default values of the data type.</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.SortCollection">
            <summary>
            
            Sorts the collection ascending by default.
            
            Сортира колекцията във възходящ ред. Възходящия ред е по подразбиране.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.SortCollectionBy(CommonLibrary.Enums.SortingOptions)">
            <summary>
            
            EN:
               Sorts the collection by specified sorting options and
               returns it sortet.
               The options for sorting should be specified with a flag from SprtingOptions enumeration.
               Use SortingOptions.Ascending to sort the collection ascending.
               Use SortingOptions.Descending to sort the collecion descending.
            
            BG:
               Сортира указаната колекция с указаните опций за сортиране.
               Режима на сортиране трябва да бъде указан с флаг от еномерацията SortingOptions.
               Използвай SortingOptions.Ascending за да сортираш колекцията възходящо.
               Използвaй SortingOptions.Descending за да сортираш колекцията низходящо.
            
            </summary>
            
            <param name="options">
             EN: The sorting options.
             BG: Опцийте за сортиране.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.ReverseCollection">
            <summary>
            
            Reverse the collection.
            
            Обръща реда на елементите в колекцията.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.IsTrueForAll(System.Predicate{`0})">
            <summary>
            
            Checks if all the elements in the collection match given condition.
            
            Проверява дали всички елементи в колекцията отговарят на зададеното условие.
            
            <returns>Тrue if all elements match the condition, otherwise false.</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.ExecuteOnEach(System.Action{`0})">
            <summary>
            
            Iterates over collection and execute the action with each element.
            
            Итерира през всеки един елемент в колекцията и го подава като параметър на командата, след което
            я изпълява.
            
            <param name="command">The command(Method) to be executed with each element</param>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.TruncateCollection">
            <summary>
            
            Truncates the collection, and resets the capacity to the default capacity.
            
            Изпразва колекцията и върща капацитета по подразбиране.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.Clone">
            <summary>
            
            Clone the collection to another collection.
            
            Клонира колекцията в нова колекция, но като обект. Необходимо е преобразуване на типа данни чрез кастинг.
            
            <returns>New collection as object.</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.RemoveExcessCapacity">
            <summary>
            
            Trim the capacity to the elements count.
            
            Намалява капацитета на колекцията до броя на елементите.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.ReduceCapacityTo(System.Int32)">
             <summary>
             
             Trim the capacity to given value.
            
             Намалява капацитета на колекцията до зададения капацитет.
              
             <param name="capacity">The new capacity</param>
             
             </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.AsReadOnly">
            <summary>
            
            Return the collection as read only collection.
            
            Връща колекцията като защитена колекция.
            
            <returns>Safe readonly collection</returns>
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Collection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:CommonLibrary.Collections.Common.CommonList">
            <summary>
            
            EN:
            Common(generic) list of objects that allows null.
            The default capacity of the list in 4 elements, and its multiplied both when is
            reached. The collection is COMMON. The type of the elements is System.Object, so the
            elements in the collection can be from different data types (not strongly typed).
            
            BG:
            Общ лист от обекти, които позволяват null.
            Капацитета по подразбиране е 4 елемента и се удвоява, когато е достигнат.
            Колекцията е ОБЩА. Елементите са от тип данни System.Object, тоест те са обекти и
            това им позволява да бъдат от всякакъв тип данни. На кратко всеки елемент може да е от различен тип данни,
            което прави колекцията обща, а не стого типизирана.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Common.CommonList.Item(System.Int32)">
            <summary>
            
             EN: Indexer
             
             BG: Индексатор
            
            </summary>
            
            <param name="index">
            EN: The index in the collection
            BG: Инекса на обекта в колекцията
            </param>
            
            <returns>
            EN: The object at that index
            BG: Обекта на този индекс
            </returns>
        </member>
        <member name="P:CommonLibrary.Collections.Common.CommonList.Count">
            <summary>
            
             EN: Get the count of the elements in the collection.
             
             BG: Достъпва броя на елементите в колекцията
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Common.CommonList.Capacity">
            <summary>
            
             EN: Get or set the capacity of the collection
             
             BG: Достъпва капацитета на колекцията
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Common.CommonList.FirstObject">
            <summary>
            
             EN: Get or set the first object in the collection
             
             BG: Достъпва първия обект в колекцията
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Common.CommonList.LastObject">
            <summary>
            
             EN: Get or set the last object in the collection
             
             BG: Достъпва последния обект в колекцията
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.#ctor">
            <summary>
            
            EN: Create new empty common list with default capacity.  
             
            BG: Създава нов празен списък с капацитет по подразбиране.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.#ctor(System.Int32)">
            <summary>
            
            EN: Create new empty list with specified capacity.  
             
            BG: Създава нов празен списък със зададен капацитет.
            
            </summary>
            
            <param name="capacity">
            EN: The capacity.  
            BG: Капацитетът.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.#ctor(System.Boolean)">
            <summary>
            
            EN: Creates new empty collection with maximum capacity if the boolean variable value is true.  
            If false, the collection will be created with the default capacity.  
             
            BG: Създава нова празна колекция с максимален капацитет, ако булевата стойност е true.  
            Ако е false, колекцията се създава с капацитет по подразбиране.
            
            </summary>
            
            <param name="maxCapacity">
            EN: When true, maximum capacity is enabled.  
            BG: Ако е true, се задава максимален капацитет.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.#ctor(System.Object[])">
            <summary>
            
            EN: Create new common list with copied objects from the array of objects and  
            capacity = count of the elements.  
             
            BG: Създава нов списък с копирани обекти от масив и капацитет равен на броя на елементите.
            
            </summary>
            
            <param name="objects">
            EN: The object array.  
            BG: Масивът от обекти.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.#ctor(System.Object[],System.Int32)">
            <summary>
            
            EN: Create new common list with copied objects from the array of objects and  
            capacity = specified capacity.  
             
            BG: Създава нов списък с копирани обекти от масив и зададен капацитет.
            
            </summary>
            
            <param name="objects">
            EN: The object array.  
            BG: Масивът от обекти.
            </param>
            
            <param name="capacity">
            EN: The capacity.  
            BG: Капацитетът.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.#ctor(System.Object[],System.Boolean)">
            <summary>
            
            EN: Create new common list with copied objects from the array of objects and  
            maximum capacity.  
             
            BG: Създава нов списък с копирани обекти от масив и максимален капацитет.
            
            </summary>
            
            <param name="objects">
            EN: The object array.  
            BG: Масивът от обекти.
            </param>
            
            <param name="maxCapacity">
            EN: When true, maximum capacity is enabled.  
            BG: Ако е true, се задава максимален капацитет.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.Add(System.Object)">
            <summary>
            
            EN: Adds object to the collection.  
             
            BG: Добавя обект към колекцията.
            
            </summary>
            
            <param name="value">
            EN: The object (value).  
            BG: Обектът (стойността).
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLibrary.Collections.Common.CommonList.AddManyObjects(System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLibrary.Collections.Common.CommonList.AddObjectArray(System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLibrary.Collections.Common.CommonList.Remove(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:CommonLibrary.Collections.Common.CommonList.RemoveObjectAt(System.Int32)" -->
        <member name="M:CommonLibrary.Collections.Common.CommonList.RemoveAllInRange(System.Int32,System.Int32)">
            <summary>
            
            EN: Removes all objects in the specified range from the collection.  
             
            BG: Премахва всички обекти в зададения диапазон от колекцията.
            
            </summary>
            
            <param name="startIndex">
            EN: The starting index.  
            BG: Началният индекс.
            </param>
            
            <param name="endIndex">
            EN: The ending index.  
            BG: Крайният индекс.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.ClearList">
            <summary>
            
            EN: Clears the list.  
             
            BG: Изчиства списъка.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.Clone">
            <summary>
            
            EN: Clones the collection to a new collection.  
             
            BG: Клонира колекцията в нова колекция.
            
            </summary>
            
            <returns>
            EN: New collection with copied elements.  
            BG: Нова колекция с копирани елементи.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.ContainsObject(System.Object)">
            <summary>
            
            EN: Checks if the collection contains the object.  
             
            BG: Проверява дали колекцията съдържа дадения обект.
            
            </summary>
            
            <param name="value">
            EN: The object.  
            BG: Обектът.
            </param>
            
            <returns>
            EN: True if the object is in the collection, otherwise false.  
            BG: Връща true ако обектът е в колекцията, иначе false.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.InsertObjectAt(System.Object,System.Int32)">
            <summary>
            
            EN: Inserts an object at the specified index in the collection.  
             
            BG: Вмъква обект на зададен индекс в колекцията.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.InsertManyObjectsAt(System.Object[],System.Int32)">
            <summary>
            
            EN: Inserts multiple objects at the specified index in the collection.  
             
            BG: Вмъква множество обекти на зададен индекс в колекцията.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.ReturnAsArray">
            <summary>
            
            EN: Converts the common list to an array of objects.  
             
            BG: Преобразува списъка в масив от обекти.
            
            </summary>
            
            <returns>
            EN: New array with copied objects from the list.  
            BG: Нов масив с копирани обекти от списъка.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.ReturnAsCollection">
            <summary>
            
            EN: Converts the common list to a Collection of objects.  
             
            BG: Преобразува списъка в колекция от обекти.
            
            </summary>
            
            <returns>
            EN: New collection with the objects from the list.  
            BG: Нова колекция с обектите от списъка.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.Common.CommonList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:CommonLibrary.Collections.Common.CommonPair">
            <summary>
            
            EN:
              CommonPair defines a key value pair where the key and the value are objects(data type System.Object).
              
             БГ:
               CommonPair представлява обща двойка ключ-стойност, като под обща се
               има в предвид, че типа данни на ключа и на стойността е System.Object, тоест те
               са обекти и това позволява гъвкавост на двойката ключ-стойност и на кода като цяло, но
               за сметка на сигурността.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.Common.CommonPair.Key">
            <summary>
            
            EN:
              Gets the key of the key value pair.
              
            BG:
              Достъпва ключа на дойката ключ-стойност.
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CommonLibrary.Collections.Common.CommonPair.Value" -->
        <!-- Badly formed XML comment ignored for member "P:CommonLibrary.Collections.Common.CommonPair.KeyAndValue" -->
        <member name="M:CommonLibrary.Collections.Common.CommonPair.#ctor(System.Object,System.Object)">
            <summary>
            
            EN:
              Creates new common pair with the specified
              key and value.
            
            BG:
              Създава нова двойка ключ-стойност с указаните
              ключ и стойност.
            
            </summary>
            
            <param name="key">
             EN: The key as object.
             BG: Ключа като обект.
            </param>
            
            <param name="value">
             EN: The value as object.
             BG: Стойността като обект.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLibrary.Collections.Common.CommonPair.ReturnAsString" -->
        <member name="M:CommonLibrary.Collections.Common.CommonPair.Clone">
            <summary>
            
            EN:
              Returns the key-value pair as object, which can be casted to
              pair data type.
              
            BG:
              Връща двойката ключ-стойност като обект, който да бъде конвертиран 
              към типа данни на двойката (така работи клонирането).
            
            </summary>
        </member>
        <member name="T:CommonLibrary.Collections.DataQueue`1">
            <summary>
             Defines stringly-typed collection of data with FIFO structore(First In - First Out).
             So the first element that enters the queue will come out first and the last element
             that enters the queue will come out last.
            </summary>
            
            <typeparam name="Type">
             The data type of the elements in the queue.
            </typeparam>
        </member>
        <member name="P:CommonLibrary.Collections.DataQueue`1.Count">
            <summary>
             Gets the number of the elements in the queue.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.DataQueue`1.Values">
            <summary>
             Gets the values of the queue in an array.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.#ctor">
            <summary>
             Creates new empty queue.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Creates new queue with copied elements from the 
             specified array.
            </summary>
            
            <param name="array">
             The array which elements will be copied.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.Enter(`0)">
            <summary>
             Adds an element to the end of the queue.
            </summary>
            
            <param name="element">
             The element to be added.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.Enter(`0[])">
            <summary>
             Adds the specified elements from the array to the queue.
            </summary>
            
            <param name="elements">
             The array with the elements.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.PullOut">
            <summary>
             Removes the element in the beginning of the queue
             and returns it.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.PullOut(System.Int32)">
            <summary>
             Removes the specified amount of elements from the
             queue starting from the beginning.
            </summary>
            
            <param name="count">
             The count of the elements to remove.
            </param>
            
            <returns>
             An array with the removed values.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.ViewFirst">
            <summary>
             Returns the first element in the queue without removing it.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.Clear">
            <summary>
             Clears the queue.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.AsList">
            <summary>
             Converts the queue to a list.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.AsCollection">
            <summary>
             Converts the queue to a collection.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.AsSet">
            <summary>
             Converts the queue to a set.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataQueue`1.AsLinkedList">
            <summary>
             Converts the queue to a linked list.
            </summary>
        </member>
        <member name="T:CommonLibrary.Collections.DataStack`1">
            <summary>
             Defines stack of data. The stack is data structure of type LIFO (Last In - First Out) and
             the first element that enters the stack will come out last, and the last element
             that enters the stack will come out first. The maximum allowed capacity of the stack is
             one billion elements and the default capacity is zero elements. The stack is implemented 
             with a modular array which is similar to the linked list. That allows fast operation like adding
             and removing without losing the idea of the stack.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.DataStack`1.Count">
            <summary>
             Gets the count of the elements in the stack.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.DataStack`1.Values">
            <summary>
             Gets all the values of the stack in an array.
             The last value in the stack is the first value of
             the returned array.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.#ctor">
            <summary>
             Creates new empty stack.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Creates new stack with copied elements from the extern array.
            </summary>
            
            <param name="array">
             The extern array which elements will be copied.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.Put(`0)">
            <summary>
             Adds an element to the top of the stack.
            </summary>
            
            <param name="element">
             The element to be added.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.Put(`0[])">
            <summary>
             Adds an array of values to the top of the stack.
            </summary>
            
            <param name="element">
             The array of values to be added.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.Take">
            <summary>
             Removes the element on the top of the stack.
            </summary>
            
            <returns>
             The element of the top.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.Take(System.Int32)">
            <summary>
             Removes the specified amount of elements
             from the stack.
            </summary>
            
            <param name="count">
             The count of the elements to be removed.
            </param>
            
            <returns>
             An array with the removed values.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.ViewTop">
            <summary>
             Peek at the top of the stack. This method does not remove the value.
            </summary>
            
            <returns>
             The top element of the stack.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.AsCollection">
            <summary>
             Returns a collection with the stack values.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.AsSet">
            <summary>
             Returns a set with the stack values.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.AsModularArray">
            <summary>
             Returns a modular array with the stack values.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.DataStack`1.AsList">
            <summary>
             Returns a list with the stack values.
            </summary>
        </member>
        <member name="T:CommonLibrary.Collections.KeyValueCollection`2">
             <summary>
             
              EN:
                Associative array of key value pairs, sorted by default.
                Default capacity is 2 pairs and maximum capacity is 1 000 000 000 pairs.
                The KeyValueCollection like others associative arrays is indexed by a key.
                The indexer return the value associated to that key in the internal key-value pair.
              
              BG:
                KeyValueCollection представлява асоциативен масив от двойки ключ-стойност, който по подразбиране е сортиран.
                Стандартен капацитет: 2 двойки ключ-стойност.
                Максимален капацитет: 1 000 000 000 двойки ключ-стойност.
                Подобно на други асоциативни структури от данни, KeyValueCollection използва ключ за достъп до стойностите.
                Чрез индексатора се връща стойността, асоциирана с дадения ключ.
              
             </summary>
             
             <typeparam name="KeyType">
              EN: The data type of the keys.
              BG: Типа данни на ключовете.
             </typeparam>
             
            <typeparam name="ValueType">
             EN: The data type of the values.
             BG: Типа данни на асоцийраните стойности.
             </typeparam>
        </member>
        <member name="P:CommonLibrary.Collections.KeyValueCollection`2.Item(`0)">
            <summary>
            
            EN: Indexer.
            
            BG: Индексатор
            
            </summary>
            
            <param name="key">
            EN: The key of the key-value pair
            BG: Ключа от двойката ключ-стойност
            </param>
            
            <returns>
            EN: The value associated with that key
            BG: Стойността към този ключ
            </returns>
        </member>
        <member name="P:CommonLibrary.Collections.KeyValueCollection`2.Count">
            <summary>
            
            EN: Get the count of the key-value pairs.
            
            BG: Връща броя на двойките ключ-стойност.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.KeyValueCollection`2.Capacity">
            <summary>
            
            EN: Get or set the capacity of the collection.
            
            BG: Достъпва капацитета на колекцията.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.KeyValueCollection`2.Keys">
            <summary>
            
            EN: Get the keys of the collection in a collection of keys.
            
            BG: Връща всички ключове от колекцията в колекция от ключове.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.KeyValueCollection`2.Values">
            <summary>
            
            EN: Get the associated values of the collection in a collection of values.
            
            BG: Връща всички асоциирани стойности от колекцията в колекция от стойности.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.#ctor">
            <summary>
            
            EN: Create a new empty collection of key-value pairs with default capacity.
            
            BG: Създава нова празна колекция от двойки ключ-стойност със стандартен капацитет.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.#ctor(System.Int32)">
            <summary>
            
            EN: Create a new empty collection of key-value pairs with specified capacity.
            
            BG: Създава нова празна колекция от двойки ключ-стойност със зададен капацитет.
            
            </summary>
            
            <param name="capacity">
            EN: The capacity  
            BG: Капацитетът
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.#ctor(System.Boolean)">
            <summary>
            
            EN: Create a new empty collection of key-value pairs with maximum capacity if specified.
            
            BG: Създава нова празна колекция от двойки ключ-стойност с максимален капацитет, ако е указано.
            
            </summary>
            
            <param name="maxCapacity">
            EN: Indicates whether to use maximum capacity  
            BG: Указва дали да се използва максимален капацитет
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            
            EN: Create a collection of key-value pairs by copying pairs from another collection.  
            Capacity is set to the number of copied pairs.
            
            BG: Създава колекция от двойки ключ-стойност чрез копиране от друга колекция.  
            Капацитетът се задава според броя на копираните двойки.
            
            </summary>
            
            <param name="collection">
            EN: The collection from which key-value pairs will be copied  
            BG: Колекцията, от която ще се копират двойките ключ-стойност
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32)">
            <summary>
            
            EN: Create a collection of key-value pairs by copying pairs from another collection  
            and setting a specified capacity.
            
            BG: Създава колекция от двойки ключ-стойност чрез копиране от друга колекция  
            и със зададен капацитет.
            
            </summary>
            
            <param name="collection">
            EN: The collection from which key-value pairs will be copied  
            BG: Колекцията, от която ще се копират двойките ключ-стойност
            </param>
            
            <param name="capacity">
            EN: The new capacity  
            BG: Новият капацитет
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Boolean)">
            <summary>
            
            EN: Create a collection of key-value pairs by copying pairs from another collection.  
            If maxCapacity is true, maximum capacity is used.  
            Otherwise, capacity is set to the number of copied pairs.
            
            BG: Създава колекция от двойки ключ-стойност чрез копиране от друга колекция.  
            Ако maxCapacity е true, се използва максимален капацитет.  
            В противен случай капацитетът се задава според броя на копираните двойки.
            
            </summary>
            
            <param name="collection">
            EN: The collection from which key-value pairs will be copied  
            BG: Колекцията, от която ще се копират двойките ключ-стойност
            </param>
            
            <param name="maxCapacity">
            EN: Indicates whether to use maximum capacity  
            BG: Указва дали да се използва максимален капацитет
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.Add(`0,`1)">
            <summary>
            
            EN: Adds key-value pair in the collection with specified key and associated value to that key.
            
            BG: Добавя двойка ключ-стойност в колекцията със зададен ключ и съответната стойност.
            
            </summary>
            
            <param name="key">
            EN: The key of the pair  
            BG: Ключът на двойката
            </param>
            
            <param name="value">
            EN: The associated value of the key  
            BG: Стойността, асоциирана с ключа
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            EN: Adds the specified key-value pair in the collection.
            
            BG: Добавя зададената двойка ключ-стойност в колекцията.
            
            </summary>
            
            <param name="pair">
            EN: The key-value pair  
            BG: Двойката ключ-стойност
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.AddCollection(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            
            EN: Adds a collection (array) of key-value pairs to the collection.
            
            BG: Добавя колекция (масив) от двойки ключ-стойност към колекцията.
            
            </summary>
            
            <param name="collection">
            EN: The collection whose key-value pairs will be added  
            BG: Колекцията, чиито двойки ключ-стойност ще бъдат добавени
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.RemoveByIndex(System.Int32)">
            <summary>
            
            EN: Removes the key-value pair at the specified index in the collection.
            
            BG: Премахва двойката ключ-стойност на зададения индекс в колекцията.
            
            </summary>
            
            <param name="index">
            EN: The index of the key-value pair  
            BG: Индексът на двойката ключ-стойност
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.RemoveByKey(`0)">
            <summary>
            
            EN: Removes the key-value pair that contains the specified key.
            
            BG: Премахва двойката ключ-стойност, която съдържа зададения ключ.
            
            </summary>
            
            <param name="key">
            EN: The key of the pair  
            BG: Ключът на двойката
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.RemoveAllInRange(System.Int32,System.Int32)">
            <summary>
            
            EN: Removes all key-value pairs in the specified range in the collection.
            
            BG: Премахва всички двойки ключ-стойност в зададения диапазон от колекцията.
            
            </summary>
            
            <param name="startIndex">
            EN: The starting index in the collection  
            BG: Началният индекс в колекцията
            </param>
            
            <param name="endIndex">
            EN: The ending index in the collection  
            BG: Крайният индекс в колекцията
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.RemoveAll">
            <summary>
            
            EN: Removes all key-value pairs from the collection.
            
            BG: Премахва всички двойки ключ-стойност от колекцията.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.HasKey(`0)">
            <summary>
            
            EN: Checks if the specified key exists in the collection.
            
            BG: Проверява дали зададеният ключ съществува в колекцията.
            
            </summary>
            
            <param name="key">
            EN: The key  
            BG: Ключът
            </param>
            
            <returns>
            EN: True if the key exists in the collection, otherwise false  
            BG: Връща true, ако ключът съществува в колекцията, иначе false
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.TrimCapacity">
            <summary>
            
            EN: Reduces the capacity of the collection to match the number of pairs.
            
            BG: Намалява капацитета на колекцията до броя на двойките.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.ReduceCapacityTo(System.Int32)">
            <summary>
            
            EN: Reduces the capacity of the collection to the specified value.
            
            BG: Намалява капацитета на колекцията до зададената стойност.
            
            </summary>
            
            <param name="capacity">
            EN: The new capacity  
            BG: Новият капацитет
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.SortCollectionByKey(CommonLibrary.Enums.SortingOptions)">
            <summary>
            
            EN: Sorts the collection by keys in the specified order (default is ascending).
            
            BG: Сортира колекцията по ключове в зададения ред (по подразбиране възходящ).
            
            </summary>
            
            <param name="options">
            EN: The sorting options  
            BG: Опциите за сортиране
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.SortCollectionByValue(CommonLibrary.Enums.SortingOptions)">
            <summary>
            
            EN: Sorts the collection by values in the specified order (default is ascending).
            
            BG: Сортира колекцията по стойности в зададения ред (по подразбиране възходящ).
            
            </summary>
            
            <param name="options">
            EN: The sorting options  
            BG: Опциите за сортиране
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.Clone">
            <summary>
            
            EN: Clones the collection.
            
            BG: Клонира колекцията.
            
            </summary>
            
            <returns>
            EN: The collection as an object  
            BG: Колекцията като обект
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.KeyValueCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:CommonLibrary.Collections.ModularArray`1">
            <summary>
             Defines array of linked modules similar to the linked list. The array
             contains modules and each module has a value and reference to the next module
             and to the previous module. The first module is called by convention 'head' and
             his previous module is equals to null. The last module by convention is called 
             'tail' and his next module is equals to null.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.ModularArray`1.Head">
            <summary>
             Gets the head module of the modular array.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.ModularArray`1.Tail">
            <summary>
             Gets the tail module of the modular array.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.ModularArray`1.Count">
            <summary>
             Gets the number of modules in the modular array.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.ModularArray`1.Modules">
            <summary>
             Gets all the modules linked together and returns them in an array.
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.ModularArray`1.Values">
            <summary>
             Extracts all the values from the modules in array.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.#ctor">
            <summary>
             Creates new empty modular array.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Creates new modular array by creating a modules with the values from the
             extern array and link the modules together.
            </summary>
            
            <param name="externArray">
             The array with values.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.Add(`0,CommonLibrary.Enums.ModulePosition)">
            <summary>
             Adds a new module to the modular array at the specified position.
             The position for inserting should be specified with a flag form the 
             "ModulePosition" enumeration.
             Use flag "Head" to insert the element to the beginning.
             Use flag "Tail" to insert the element to the end.
            </summary>
            
            <param name="value">
             The value to be added.
            </param>
            
            <param name="position">
             The position where the new module should be added.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.Remove(CommonLibrary.Enums.ModulePosition)">
            <summary>
             Removes a module from the modular array at the specified position.
            </summary>
            
            <param name="position">
             The position where the module should be removed.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.ContainsValue(`0)">
            <summary>
             Checks if some of the modules in the modular array contains the value.
            </summary>
            
            <param name="value">
             The value to be searched
            </param>
            
            <returns>
             True if some of the modules contains the value, otherwise false.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.Clear">
            <summary>
             Clears all modules from the modular array.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.ExecuteOnEach(System.Action{`0})">
            <summary>
             Executes a command on each module in the modular array.
            </summary>
            
            <param name="command">
              The command to execute on each module.
            </param>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.AsArray">
            <summary>
             Returns an array that contains all module values in the modular array.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.AsCollection">
            <summary>
             Returns the values of the array in a collection.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.ModularArray`1.Clone">
            <summary>
             Clones the modular array.
            </summary>
        </member>
        <member name="T:CommonLibrary.Collections.PairList`2">
            <summary>
            
            EN:
              Associative collection of objects of type 
              CommonLibrary.AbstractDataTypes.Pair. Each pair has key and associated value.
            
            BG:
              Асoциативен масив от обекти от тип данни
              CommonLibrary.AbstractDataTypes.Pair. Всяка двойка има ключ
              и асоцийрана с него стойност. Както при всеки асоциативен масив, така и този
              достъпва дадена стойност по неиния ключ.
            
            </summary>
            
            <typeparam name="KeyType">
             EN: The data type of the key.
             BG: Типът данни на ключа.
            </typeparam>
            
            <typeparam name="ValueType">
             EN: The data type of the value.
             BG: Типът данни на стойността.
            </typeparam>
        </member>
        <member name="P:CommonLibrary.Collections.PairList`2.Item(`0)">
            <summary>
            
            EN:
              Indexer.
              
            BG:
              Индексатор.
            
            </summary>
            
            <param name="key">
             EN: The key of the pair.
             BG: Ключа на двойката ключ-стойност.
            </param>
            
            <returns>
             EN: The value associated with that key.
             BG: Стойността асоцийрана с този ключ.
            </returns>
        </member>
        <member name="P:CommonLibrary.Collections.PairList`2.Keys">
            <summary>
            
            EN:
              Gets the keys from the collection in a collection of keys.
              
            BG:
              Извлича ключовете от двойките ключ-стойност в колекция от ключове.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.PairList`2.Values">
            <summary>
            
            EN:
              Gets the values from the collection in a collection of values.
              
            BG:
              Извлича стойностите от двойките ключ-стойност в колекция от стойности.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.PairList`2.Capacity">
            <summary>
            
            EN:
              Get or set the capacity of the collection.
            
            BG:
              Достъпва капацитета на асоциативната колекция.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Collections.PairList`2.Count">
            <summary>
            
            EN:
              Gets the count of the pairs in the collection.
              
            BG:
              Достъпва бройката на двойките ключ-стойност в колецията.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.#ctor">
            <summary>
            Creates new pair list with default capacity of 4 pairs.
            Създава нов празен лист с капацитет по подразбиране от 4 двойки.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.#ctor(System.Int32)">
            <summary>
            Creates new pair list with the specified capacity.
            Създава нов празен лист с указания капацитет.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.#ctor(System.Boolean)">
            <summary>
            Creates new pair list with maximum capacity.
            Създава нов празен лист с максимален капацитет.
            </summary>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.Add(CommonLibrary.AbstractDataTypes.Pair{`0,`1})">
            <summary>
            Добавя единичен елемент (ключ–стойност) към колекцията.  
            Adds a single (key–value) pair to the collection.
            </summary>
            <param name="pair">
            Елементът за добавяне.  
            The pair to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Аргументът <paramref name="pair"/> е null.  
            The <paramref name="pair"/> argument is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            В колекцията вече съществува елемент със същия ключ.  
            An element with the same key already exists in the collection.
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.Add(`0,`1)">
            <summary>
            Добавя единичен елемент (ключ–стойност) към колекцията.  
            Adds a single (key–value) pair to the collection.
            </summary>
            <param name="key">
            Ключът на елемента.  
            The key of the element.
            </param>
            <param name="value">
            Стойността, асоциирана с ключа.  
            The value associated with the key.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> е null (ако <typeparamref name="KeyType"/> допуска null).  
            <paramref name="key"/> is null (if <typeparamref name="KeyType"/> allows null).
            </exception>
            <exception cref="T:System.ArgumentException">
            В колекцията вече съществува елемент със същия ключ.  
            An element with the same key already exists in the collection.
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.AddMany(System.Collections.Generic.IEnumerable{CommonLibrary.AbstractDataTypes.Pair{`0,`1}})">
            <summary>
            Добавя множество елементи (ключ–стойност) към колекцията.  
            Adds multiple (key–value) pairs to the collection.
            </summary>
            <param name="collection">
            Последователност от елементи за добавяне.  
            The sequence of pairs to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> е null.  
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Някой от елементите е невалиден или съдържа дублиращ се ключ.  
            One or more items are invalid or contain duplicate keys.
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.Remove(System.Int32)">
            <summary>
            Премахва елемента на указан индекс.  
            Removes the element at the specified index.
            </summary>
            <param name="index">
            Нулево-базиран индекс на елемента за премахване.  
            The zero-based index of the element to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> е извън диапазона [0, Count - 1].  
            <paramref name="index"/> is outside the range [0, Count - 1].
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.Remove(`0)">
            <summary>
            Премахва елемента с посочения ключ, ако съществува.  
            Removes the element with the specified key, if it exists.
            </summary>
            <param name="key">
            Ключът на елемента за премахване.  
            The key of the element to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> е null (ако <typeparamref name="KeyType"/> допуска null).  
            <paramref name="key"/> is null (if <typeparamref name="KeyType"/> allows null).
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Не е намерен елемент с дадения ключ.  
            No element with the specified key was found.
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonLibrary.Collections.PairList`2.RemoveInRange(System.Int32,System.Int32)" -->
        <member name="M:CommonLibrary.Collections.PairList`2.Insert(System.Int32,CommonLibrary.AbstractDataTypes.Pair{`0,`1})">
            <summary>
            Вмъква елемент на указан индекс, измествaйки следващите елементи надясно.  
            Inserts an element at the specified index, shifting subsequent elements to the right.
            </summary>
            <param name="index">
            Нулево-базиран индекс. Допустим диапазон: [0, Count].  
            The zero-based index. Allowed range: [0, Count].
            </param>
            <param name="pair">
            Елементът за вмъкване.  
            The pair to insert.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> е извън допустимия диапазон.  
            <paramref name="index"/> is outside the allowed range.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="pair"/> е null.  
            <paramref name="pair"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Вече съществува елемент със същия ключ.  
            An element with the same key already exists.
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.Insert(System.Int32,`0,`1)">
            <summary>
            Вмъква елемент (ключ–стойност) на указан индекс.  
            Inserts a (key–value) pair at the specified index.
            </summary>
            <param name="index">
            Нулево-базиран индекс. Допустим диапазон: [0, Count].  
            The zero-based index. Allowed range: [0, Count].
            </param>
            <param name="key">
            Ключът на елемента.  
            The key of the element.
            </param>
            <param name="value">
            Стойността, асоциирана с ключа.  
            The value associated with the key.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> е извън допустимия диапазон.  
            <paramref name="index"/> is outside the allowed range.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> е null (ако <typeparamref name="KeyType"/> допуска null).  
            <paramref name="key"/> is null (if <typeparamref name="KeyType"/> allows null).
            </exception>
            <exception cref="T:System.ArgumentException">
            Вече съществува елемент със същия ключ.  
            An element with the same key already exists.
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.Insert(System.Int32,System.Collections.Generic.IEnumerable{CommonLibrary.AbstractDataTypes.Pair{`0,`1}})">
            <summary>
            Вмъква колекция от елементи, започвайки от указан индекс.  
            Inserts a collection of elements starting at the specified index.
            </summary>
            <param name="index">
            Нулево-базиран начален индекс. Допустим диапазон: [0, Count].  
            The zero-based starting index. Allowed range: [0, Count].
            </param>
            <param name="collection">
            Последователност от елементи за вмъкване.  
            The sequence of elements to insert.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> е извън допустимия диапазон.  
            <paramref name="index"/> is outside the allowed range.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> е null.  
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Някой от елементите е невалиден или съдържа дублиращ се ключ.  
            One or more items are invalid or contain duplicate keys.
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.ContainsKey(`0)">
            <summary>
            Проверява дали в колекцията съществува елемент с дадения ключ.  
            Checks whether the collection contains an element with the specified key.
            </summary>
            <param name="key">
            Ключът за търсене.  
            The key to locate.
            </param>
            <returns>
            <see langword="true"/>, ако съществува елемент с този ключ; иначе <see langword="false"/>.  
            <see langword="true"/> if an element with the specified key exists; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> е null (ако <typeparamref name="KeyType"/> допуска null).  
            <paramref name="key"/> is null (if <typeparamref name="KeyType"/> allows null).
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.ContainsValue(`1)">
            <summary>
            Проверява дали в колекцията съществува дадената стойност.  
            Checks whether the collection contains the specified value.
            </summary>
            <param name="value">
            Стойността за търсене.  
            The value to locate.
            </param>
            <returns>
            <see langword="true"/>, ако съществува елемент с тази стойност; иначе <see langword="false"/>.  
            <see langword="true"/> if an element with the specified value exists; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.SortCollection(CommonLibrary.Enums.SortingOptions)">
            <summary>
            Сортира колекцията според подадените опции.  
            Sorts the collection according to the given options.
            </summary>
            <param name="options">
            Опции за сортиране (например по ключ/стойност, възходящо/низходящо).  
            Sorting options (e.g., by key/value, ascending/descending).
            </param>
            <exception cref="T:System.ArgumentException">
            Подадени са невалидни или несъвместими опции.  
            Invalid or incompatible sorting options were provided.
            </exception>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.Clear">
            <summary>
            Премахва всички елементи от колекцията.  
            Removes all elements from the collection.
            </summary>
            <remarks>
            След извикване <c>Count</c> трябва да е 0.  
            After calling, <c>Count</c> should be 0.
            </remarks>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.ReturnAsArray">
            <summary>
            Връща представяне на колекцията като масив.  
            Returns the collection as an array.
            </summary>
            <remarks>
            Текущата сигнатура на метода е <c>void</c>. Ако трябва да връща масив,  
            прецизирайте сигнатурата например като:  
            The current method signature is <c>void</c>. To return an array,  
            consider changing it to:  
            <code>public abstract Pair&lt;KeyType, ValueType&gt;[] ReturnAsArray();</code>
            </remarks>
        </member>
        <member name="M:CommonLibrary.Collections.PairList`2.Clone">
            <summary>
             Returns the list as object.
             Връща асоциативния масив като обект.
            </summary>
        </member>
        <member name="T:CommonLibrary.Enums.BitState">
            <summary>
            
            EN:
              Provides flags that indicate the state of the bit at the given position 
              in the "ChangeBitAt()" method in the BinaryHelper class.
              
            BG:
              Предоставя флагове за състоянието на даден бит за "ChangeBitAt()" метода
              в класа BinaryHelper.
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.BitState.SwitchOn">
            <summary>
            
            EN:
              Indicates that the bit should be switched on.
              
            BG:
              Индикира, че бита трябва да бъде включен, 
              тоест да присвой стойност 1.
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.BitState.SwitchOff">
            <summary>
            
            EN:
              Indicates that the bit should be switched off.
              
            BG:
              Индикира, че бита трябва да бъде изключен, 
              тоест да присвой стойност 0.
            
            </summary>
        </member>
        <member name="T:CommonLibrary.Enums.Day">
            <summary>
            
            EN: Specifies which day of the week it is.
            
            BG: Указва кой ден от седмицата е.
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.Day.Monday">
            <summary>
            
            EN: Specifies the first day of the week  
            
            BG: Указва първия ден от седмицата
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.Day.Tuesday">
            <summary>
            
            EN: Specifies the second day of the week  
            
            BG: Указва втория ден от седмицата
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.Day.Wednesday">
            <summary>
            
            EN: Specifies the third day of the week  
            
            BG: Указва третия ден от седмицата
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.Day.Thursday">
            <summary>
            
            EN: Specifies the fourth day of the week  
            
            BG: Указва четвъртия ден от седмицата
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.Day.Friday">
            <summary>
            
            EN: Specifies the fifth day of the week  
            
            BG: Указва петия ден от седмицата
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.Day.Saturday">
            <summary>
            
            EN: Specifies the sixth day of the week 
            
            BG: Указва шестия ден от седмицата
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.Day.Sunday">
            <summary>
            
            EN: Specifies the seventh day of the week  
            
            BG: Указва седмия ден от седмицата
            
            </summary>
        </member>
        <member name="T:CommonLibrary.Enums.ModulePosition">
            <summary>
             Provides positions for modules in a modular array.
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.ModulePosition.Head">
            <summary>
             Indicates the first module in the array.
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.ModulePosition.Tail">
            <summary>
             Indicates the last module in the array.
            </summary>
        </member>
        <member name="T:CommonLibrary.Enums.SortingOptions">
            <summary>
            
            EN: Provides options for sorting.
            
            BG: Предоставя опций за сортиране.
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.SortingOptions.Ascending">
            <summary>
            
            EN: Default sorting - ascending.
            
            BG: Възходящо сортиране (по подразбиране).
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.SortingOptions.Descending">
            <summary>
            
            EN: Descending sorting.
            
            BG: Низходящо сортиране.
            
            </summary>
        </member>
        <member name="T:CommonLibrary.Enums.SplitType">
            <summary>
            
            EN:
              Specifies the splitting style, when a string is splatted by separator.
              Use NoEmptyStrings to remove the empty entries that can occur when splitting.
              Use KeepEmptyStrings to keep the empty entries.
            
            BG:
              Указва начина на разделяне на стринг по разделител.
              Използвай флага NoEmptyStrings за да се премахнат празните стрингове,
              който могат да се получат при разделянето.
              Изплозвай флага KeepEmptyStrings за да запазиш празните стрингове.
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.SplitType.ClearOutput">
            <summary>
            
            EN:
              Indicates that the empty strings, created when splitting should be
              removed.
              
            BG:
              Индикира, че празните стрингове, получени при разделяне,
              трябва да бъдат премахнати от резултата.
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.SplitType.KeepAllEntries">
            <summary>
            
            EN:
              Indicates that the empty strings, created when splitting should be
              saved.
              
            BG:
              Индикира, че празните стрингове, получени при разделяне по разделител,
              трябва да бъдат добавени в резултата.
            
            </summary>
        </member>
        <member name="T:CommonLibrary.Enums.TrimOrigin">
            <summary>
             Provides flags to indicate the position in a text/string for trim operation.
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.TrimOrigin.Beginning">
            <summary>
             Specified the beginning of the text.
            </summary>
        </member>
        <member name="F:CommonLibrary.Enums.TrimOrigin.End">
            <summary>
             Specifies the end of the text.
            </summary>
        </member>
        <member name="T:CommonLibrary.Exceptions.Error">
            <summary>
            
            EN:
              Defines common error. The default exception for everything.
            
            BG:
              Представлява обща грешка. Може да се третира като
              грешка по подразбиране и да се използва по всякакви поводи.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.Error.#ctor(System.String)">
            <summary>
            
            EN:
              Creates new Error with the specified error message.
              
            BG:
              Създава нов Error със указаното съобщение за грешка.
            
            </summary>
            
            <param name="message">
             EN: The message.
             BG: Съобщението.
            </param>
        </member>
        <member name="T:CommonLibrary.Exceptions.SyntaxException">
            <summary>
            
            EN:
             Indicates when some member value (Property or Field, Parameter..) is not typed correct.
             The check of the syntax is made with a regular expression.
             
            BG: 
             Индикира когато стойността на даден член на класа (свойство, поле, параметър..) е с непозволен синтаксис.
             Извършва се проверка на синтаксиса с регулярен израз.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Exceptions.SyntaxException.ErrorMessage">
            <summary>
            
             EN: Get or set the message that exception shows.
             
             BG: Достъпва съобщението за грешка, което се показва. 
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.SyntaxException.#ctor">
            <summary>
            
             EN: Create new SyntaxException with default error message.
             
             BG: Създава нов SyntaxException със съобщение за грешка по подразбиране.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Exceptions.SyntaxException.#ctor(System.String)">
            <summary>
            
             EN: Create new SyntaxException with specified error message.
             
             BG: Създава нов SytanxException със зададено съобщение за грешка.
            
            </summary>
            
            <param name="message">
            EN: The message for the exception.
            BG: Съобщението за грешка.
            </param>
        </member>
        <member name="T:CommonLibrary.Helpers.BinaryHelper">
            <summary>
            
            EN:
              Provides set of static methods for converting strings, numbers and etc. to binary string.
              
            BG:
              Предоставя набор от статични методи за конвертиране на текст, числа и т.н. в двойчен стринг.
              Двойчния стринг преставлява двойчно число под формата на стринг.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Helpers.BinaryHelper.ConvertIntToBinary(System.Int32)">
            <summary>
            
            EN:
              Converts the number to a binary string.
              
            BG:
              Конвертира числото в двойчен стринг.
            
            </summary>
            
            <param name="number">
             EN: The number to be converted.
             BG: Числото, което ще се конвертира.
            </param>
            
            <returns>
             EN: Binary string.
             BG: Двойчен стринг.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.BinaryHelper.ConvertStringToBinary(System.String)">
            <summary>
            
            EN:
              Converts the string to a binary string.
              
            BG:
              Конвертира стринга в двойчен стринг.
            
            </summary>
            
            <param name="text">
             EN: The text to be converted.
             BG: Текста, който ще се конвертира.
            </param>
            
            <returns>
             EN: Binary string.
             BG: Двойчен стринг.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.BinaryHelper.ConvertBinaryToInt(System.String)">
            <summary>
            
            EN:
              Converts the binary string to a integer.
              
            BG:
              Конвертира двойчния стринг в цяло число.
            
            </summary>
            
            <param name="binary">
             EN: The binary string to be converted.
             BG: Двойчния стринг, който ще се конвертира.
            </param>
            
            <returns>
             EN: Integer.
             BG: Цяло число, получено от двойчния стринг.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.BinaryHelper.ChangeBitAt(System.Int32,System.Int32,CommonLibrary.Enums.BitState)">
            <summary>
            
            EN:
              Changes the bit at the given position.
              The first index in the binary is the last bit.
              The index is incremented at every nex bit, but the 
              direction of indexing is from left to rigth.
              The state of the bit is indicated by a flag from the
              enumeration "BitState".
              Use flag "SwitchOn" to switch on the bit(set the value to 1).
              Use flag "SwitchOff" to switch off the bit(set the value to 0).
              
            BG:
               Променя състоянието на даден бит на дадена позиция.
               Позициятя на бита е неговия индекс в машинния код.
               Индекирането става от ляво на дясно, тоест на индекс 0
               е последния бит. Състоянието на бита се указва с флаг
               от еномерацията "BitState".
               Използвай флага "SwitchOn" за да вкючиш бита(да му зададеш стойност 1).
               Използвай флага "SwitchOff" за да изкючиш бита(да му зададеш стойност 0).
            
            </summary>
            
            <param name="number">
             EN: The number.
             BG: Числото.
            </param>
            
            <param name="index">
             EN: The position of the bit in the number.
             BG: Позицията на бита в числото(в машинния му код). 
            </param>
            
            <param name="state">
             BG: The state of the bit.
             BG: Съзтоянието на бита. Дали да е включен или не.
            </param>
            
            <returns>
             EN: The result as new integer.
             BG: Резултата като цяло число.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.BinaryHelper.CreateBinary(System.String,System.String)">
            <summary>
             Creates a binary(.bin) file with the given text.
            </summary>
            
            <param name="content">
             The text of the file.
            </param>
            
            <param name="binaryDirectory">
             The location of the binary - where to be created.
            </param>
        </member>
        <member name="M:CommonLibrary.Helpers.BinaryHelper.SplitToBinaries(System.String,System.String,System.Byte)">
            <summary>
              Splits the file content to several binary files.
            </summary>
            
            <param name="fileLocation">
             The location of the file.
            </param>
            
            <param name="outputFolder">
             The folder where the binaries will be saved.
            </param>
            
            <param name="parts">
             The count of the binaries.
            </param>
        </member>
        <member name="M:CommonLibrary.Helpers.BinaryHelper.ShowMessageWindow(System.Int32,System.String,System.String,System.Int32)">
            <summary>
             Shows a message window with the specified
             message and title.
            </summary>
            
            <param name="hWind"></param>
            <param name="text"></param>
            <param name="title"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:CommonLibrary.Helpers.CollectionHelper">
            <summary>
            
            EN: 
               Provides static methods for searching and editing a collection.  
             
            BG: 
               Предоставя набор от статични методи за манипулиране на колекция или масив.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.FindElementThat``1(System.Predicate{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            EN: Checks every element in the collection and extracts the one that matches the Predicate.  
             
            BG: Проверява всеки елемент в колекцията и връща първия, който отговаря на условието.  
                Ако няма съвпадения, връща стойност по подразбиране.
            
            </summary>
            
            <param name="condition">
            EN: The Predicate with the condition.  
            BG: Предикатът с условието.
            </param>
            
            <param name="collection">
            EN: The collection whose elements will be iterated.  
            BG: Колекцията, чиито елементи ще бъдат итерирани.
            </param>
            
            <returns>
            EN: The first matching element or default value if there is no match.  
            BG: Първият съвпадащ елемент или стойност по подразбиране, ако няма съвпадения.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.FindElementsThat``1(System.Predicate{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            EN: Checks every element in the collection and extracts all that match the Predicate.  
             
            BG: Проверява всеки елемент и връща всички, които отговарят на условието.  
                Ако няма съвпадения, връща масив със стойности по подразбиране.
            
            </summary>
            
            <param name="condition">
            EN: The Predicate with the condition.  
            BG: Предикатът с условието.
            </param>
            
            <param name="collection">
            EN: The collection whose elements will be checked.  
            BG: Колекцията, чиито елементи ще бъдат проверени.
            </param>
            
            <returns>
            EN: Array of matching elements or array of default values if no matches found.  
            BG: Масив от съвпадащи елементи или стойности по подразбиране, ако няма съвпадения.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.ExecuteOnEachElement``1(System.Action{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            EN: Iterates over the collection and executes the method on each element.  
             
            BG: Обхожда колекцията и изпълнява метода върху всеки елемент.
            
            </summary>
            
            <typeparam name="Type">
            EN: The data type of the method parameter and the collection elements.  
            BG: Типът на параметъра и елементите в колекцията.
            </typeparam>
            
            <param name="command">
            EN: The method to execute.  
            BG: Методът, който ще се изпълни.
            </param>
            
            <param name="collection">
            EN: The collection to iterate.  
            BG: Колекцията, която ще се обхожда.
            </param>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.ExecuteOnEachElement(System.Action{System.Object},System.Object[])">
            <summary>
            
            EN: Iterates over the object array and executes the method on each element.  
             
            BG: Обхожда масив от обекти и изпълнява метода върху всеки от тях.
            
            </summary>
            
            <param name="command">
            EN: The method to execute.  
            BG: Методът, който ще се изпълни.
            </param>
            
            <param name="objects">
            EN: The array of objects to iterate.  
            BG: Масивът от обекти, който ще се обхожда.
            </param>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.ConvertToObjectArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            EN: Converts a collection to an array of objects.  
             
            BG: Преобразува колекцията в масив от обекти.
            
            </summary>
            
            <param name="collection">
            EN: The collection to convert.  
            BG: Колекцията, която ще се преобразува.
            </param>
            
            <returns>
            EN: Array of objects.  
            BG: Масив от обекти.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.ReturnAsCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            EN: Converts an external collection to a CommonLibrary Collection.  
             
            BG: Преобразува външна колекция в колекция от тип данни CommonLibrary.Collections.Generic.Collection.
            
            </summary>
            
            <typeparam name="Type">
            EN: The data type of the elements.  
            BG: Типът на елементите.
            </typeparam>
            
            <param name="externCollection">
            EN: The external collection to convert.  
            BG: Външната колекция, която ще се преобразува.
            </param>
            
            <returns>
            EN: A new Collection with copied elements.  
            BG: Нова колекция с копирани елементи.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.CountOfMatches``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            
            EN: Counts the elements that match a condition in the collection.  
             
            BG: Брои елементите, които отговарят на условието в колекцията.
            
            </summary>
            
            <typeparam name="Type">
            EN: The data type of the elements.  
            BG: Типът на елементите.
            </typeparam>
            
            <param name="collection">
            EN: The collection to check.  
            BG: Колекцията, която ще се проверява.
            </param>
            
            <param name="condition">
            EN: The condition to match.  
            BG: Условието, което трябва да се изпълни.
            </param>
            
            <returns>
            EN: Number of matching elements.  
            BG: Броя на съвпадащите елементи.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.CreateEmptyCollection``1(System.Int32)">
             <summary>
             
             EN:
                Creates empty array with
                the specified capacity.
             
             BG:
                Създава нов празен масив с указания капацитет.
             
             </summary>
             
             <param name="capacity">
              EN: The capacity of the array.
              BG: Капацитета на масива.
             </param>
            
             <returns>
              EN: Empty array.
              BG: Празен масив.
             </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.CreateFromAnother``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             
             EN:
                Creates an array with the copied elements from another array and with
                capacity equals the count of the elements.
             
             BG:
                Създава нов масив с копирани елементи от външния масив и капацитет 
                равен на бройката на елементите.
             
             </summary>
             
             <param name="externCollection">
              EN: The extern collection witch elements will be copied.
              BG: Външната колекция, чийто елементи да бъдат копирани.
             </param>
            
             <returns>
              EN: Array with the copied elements as IEnumerable.
              BG: Масив с копираните елементи като IEnumerable.
             </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.CreateFromAnother``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
             <summary>
             
             EN:
                Creates an array with the copied elements from another array and with
                the specified capacity.
             
             BG:
                Създава нов масив с копирани елементи от външния масив и капацитет 
                равен на указания.
             
             </summary>
             
             <param name="externCollection">
              EN: The extern collection witch elements will be copied.
              BG: Външната колекция, чийто елементи да бъдат копирани.
             </param>
             
             /// <param name="capacity">
              EN: The capacity of the array.
              BG: Капацитета на масива.
             </param>
            
             <returns>
              EN: Array with the copied elements as IEnumerable.
              BG: Масив с копираните елементи като IEnumerable.
             </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.SortArrayBy``1(System.Collections.Generic.IEnumerable{``0},CommonLibrary.Enums.SortingOptions)">
            <summary>
            
            EN:
               Sorts the collection by specified sorting options and
               returns it sortet.
               The options for sorting should be specified with a flag from SprtingOptions enumeration.
               Use SortingOptions.Ascending to sort the collection ascending.
               Use SortingOptions.Descending to sort the collecion descending.
            
            BG:
               Сортира указаната колекция с указаните опций за сортиране.
               Режима на сортиране трябва да бъде указан с флаг от еномерацията SortingOptions.
               Използвай SortingOptions.Ascending за да сортираш колекцията възходящо.
               Използвaй SortingOptions.Descending за да сортираш колекцията низходящо.
            
            </summary>
            
            <typeparam name="Type">
             EN: The data type of the elements in the collection.
             BG: Типът данни на елементите в колекцията.
            
            </typeparam>
            
            <param name="collection">
             EN: The collection to be sorted.
             BG: Колекцията, която да бъде сортирана.
            
            </param>
            
            <param name="options">
             EN: The sorting options.
             BG: Опцийте за сортиране.
            </param>
            
            <returns>
             EN: The same collection, but sorted.
             BG: Връща колекцията, но сортирана по желания начин.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.SortCollectionBy``1(System.Collections.Generic.IEnumerable{``0},CommonLibrary.Enums.SortingOptions)">
            <summary>
            
            EN:
               Sorts the collection by specified sorting options and
               returns it sortet.
               The options for sorting should be specified with a flag from SprtingOptions enumeration.
               Use SortingOptions.Ascending to sort the collection ascending.
               Use SortingOptions.Descending to sort the collecion descending.
            
            BG:
               Сортира указаната колекция с указаните опций за сортиране.
               Режима на сортиране трябва да бъде указан с флаг от еномерацията SortingOptions.
               Използвай SortingOptions.Ascending за да сортираш колекцията възходящо.
               Използвaй SortingOptions.Descending за да сортираш колекцията низходящо.
            
            </summary>
            
            <typeparam name="Type">
             EN: The data type of the elements in the collection.
             BG: Типът данни на елементите в колекцията.
            
            </typeparam>
            
            <param name="collection">
             EN: The collection to be sorted.
             BG: Колекцията, която да бъде сортирана.
            
            </param>
            
            <param name="options">
             EN: The sorting options.
             BG: Опцийте за сортиране.
            </param>
            
            <returns>
             EN: The same collection, but sorted.
             BG: Връща колекцията, но сортирана по желания начин.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.Truncate``1(``0[]@)">
            <summary>
             Clears the collection.
            </summary>
            
            <typeparam name="Type">
             The data type of the elements in the collection.
            </typeparam>
            
            <param name="collection">
             The collection to be cleared.
            </param>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.Search``1(``0[],``0)">
            <summary>
             Searches for a value in a numeric array and returns its index.
            </summary>
            
            <typeparam name="Type">
             The numeric data type of the elements in the array.
            </typeparam>
            
            <param name="array">
             The array to be searched.
            </param>
            
            <param name="value">
             The value to be searched.
            </param>
            
            <returns>
             The index of the found value or -1 if not found.
            </returns>
        </member>
        <member name="M:CommonLibrary.Helpers.CollectionHelper.BinarySearch``1(``0[],``0)">
            <summary>
             Searches for a value in a numeric array and returns its index.
            </summary>
            
            <typeparam name="Type">
             The numeric data type of the elements in the array.
            </typeparam>
            
            <param name="array">
             The array to be searched.
            </param>
            
            <param name="value">
             The value to be searched.
            </param>
            
            <returns>
             The index of the found value or -1 if not found.
            </returns>
        </member>
        <member name="T:CommonLibrary.Helpers.Criptography.Encryptor">
            <summary>
            
            EN:
              Provides set of static methods for encrypting and decrypting 
              file content with a key. The encryptor encrypts a file by iterating
              over all symbols of the file content and apply XOR (^) bitwise operation
              with the key with each of them. The decrypting operation is the same as encryption.
              The key for the encryption and decryption processes can be set by the "Key" property.
            
            BG:
              Предоставя набор от статични методи за криптиране и декриптиране на съдържание на файл с ключ.
              Крипторът шифрира файл, като обхожда всички символи от съдържанието на файла и
              прилага побитова операция XOR (^) (побитово изключващо ИЛИ) с ключа върху всеки от тях. 
              Операцията по декриптиране е същата като при криптиране.
              Ключа за шифроване и дешифроване може да бъде достъпен и променен от 
              свойството "Key" на класа.
            
            </summary>
        </member>
        <member name="F:CommonLibrary.Helpers.Criptography.Encryptor._key">
            <summary>
             
             EN:
               The key for the encryptiong.
             
             BG:
               Ключа за шифроване.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Helpers.Criptography.Encryptor.Key">
            <summary>
            
            EN:
              Gets or sets the key for the encyption and decryption processes.
              
            BG:
              Достъпва или променя ключа за шифроване и дешифроване.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Helpers.Criptography.Encryptor.Encrypt(System.String)">
            <summary>
            
            EN:
              Encrypts the content of the file.
              
            BG:
              Шифрира указания файл.
            
            </summary>
            
            <param name="filePath">
             EN: The directory of the file in the system.
             BG: Директорията на файла в системата.
            </param>
        </member>
        <member name="M:CommonLibrary.Helpers.Criptography.Encryptor.Decrypt(System.String)">
            <summary>
            
            EN:
              Decripts a file, encrypted with the same encryptor - the current data type.
              
            BG:
              Дешифрова файл, шифриран с текущия криптор.
            
            </summary>
            
            <param name="filePath">
             ЕN: The directory of the file in the system.
             BG: Директорията на файла в системата.
            </param>
        </member>
        <member name="T:CommonLibrary.Helpers.NumberGenerator">
            <summary>
            
             EN: 
               Generator of random numbers. Provides methods for generating random number, or
               sequence of random numbers, in diapason of starting number and
               ending number. The range of the diapason shoul be defined with the creation of the
               generator, and can be accessed or changed with the Start and the End properties.
               
             BG:
               Генератор на случайни номера. Предоставя необходимите методи за генериране на 
               случаен номер или поредица от случайни номера, в диапазон от 
               стартово число и крайно число. Началото и края на диапазона за генериране на числа трябва
               да бъдат указани в началото със създаването на генератора. В по късен етап могад да бъдат
               достъпени или промемени чрез свойтвата Start и End на класа.
               
            </summary>
        </member>
        <member name="P:CommonLibrary.Helpers.NumberGenerator.Start">
            <summary>
            
            EN:
               Gets or sets the start of the diapason for generating.
               
            BG:
              Достъпва началото на диапазона за генериране на числа.
            
            </summary>
        </member>
        <member name="P:CommonLibrary.Helpers.NumberGenerator.End">
            <summary>
            
            EN:
               Gets or sets the end of the diapason for generating.
               
            BG:
              Достъпва края на диапазона за генериране на числа.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Helpers.NumberGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
             
            EN:
              Creates new generator of random numbers, инт the diapason
              for generating from "start" to "end".
              
            BG:
              Създава нов генератор на случайни номера в указания диапазон.
              В този случай генератора генерира число или поредица от числа в диапазон
              от "start" до "end". 
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Helpers.NumberGenerator.Generate">
            <summary>
             
            EN:
              Generates random number in the specified diapason.
              
            BG:
              Генерира случаен номер в зададения диапазон.
            
            </summary>
        </member>
        <member name="M:CommonLibrary.Helpers.NumberGenerator.GenerateMultiple(System.Int32)">
            <summary>
             
            EN:
              Generates multiple random numbers in the given diapason and
              store it in array of integers.
              
            BG:
              Генерира указано множество от случайни числа и ги записва в масив, който връща
              като стойност.
            
            </summary>
            
            <param name="count">
             EN: The count of the numbers to be generated.
             BG: Бройката случайни числа, които да се генерират.
            </param>
            
            <returns>
             EN: Array with random generated numbers.
             BG: Масив от случайно генерирани числа.
            </returns>
        </member>
    </members>
</doc>
